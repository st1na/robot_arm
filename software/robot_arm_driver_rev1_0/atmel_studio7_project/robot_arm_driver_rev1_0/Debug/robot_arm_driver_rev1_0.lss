
robot_arm_driver_rev1_0.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  00000fee  00001082  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000fee  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000002a  00800106  00800106  00001088  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001088  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000010b8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b0  00000000  00000000  000010f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000014d7  00000000  00000000  000011a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000cb7  00000000  00000000  0000267f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a4f  00000000  00000000  00003336  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000234  00000000  00000000  00003d88  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000721  00000000  00000000  00003fbc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000a8d  00000000  00000000  000046dd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000080  00000000  00000000  0000516a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
   8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
   c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  10:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  14:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  18:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  1c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  20:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  24:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  28:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  2c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  30:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  34:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  38:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  3c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  40:	0c 94 9e 03 	jmp	0x73c	; 0x73c <__vector_16>
  44:	0c 94 be 00 	jmp	0x17c	; 0x17c <__vector_17>
  48:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  4c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  50:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  54:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  58:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  5c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  60:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  64:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  68:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  6c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  70:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  74:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  78:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  7c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  80:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  84:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  88:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  8c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  90:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  94:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  98:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  9c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  ac:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  b0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_copy_data>:
  c0:	11 e0       	ldi	r17, 0x01	; 1
  c2:	a0 e0       	ldi	r26, 0x00	; 0
  c4:	b1 e0       	ldi	r27, 0x01	; 1
  c6:	ee ee       	ldi	r30, 0xEE	; 238
  c8:	ff e0       	ldi	r31, 0x0F	; 15
  ca:	02 c0       	rjmp	.+4      	; 0xd0 <__do_copy_data+0x10>
  cc:	05 90       	lpm	r0, Z+
  ce:	0d 92       	st	X+, r0
  d0:	a6 30       	cpi	r26, 0x06	; 6
  d2:	b1 07       	cpc	r27, r17
  d4:	d9 f7       	brne	.-10     	; 0xcc <__do_copy_data+0xc>

000000d6 <__do_clear_bss>:
  d6:	21 e0       	ldi	r18, 0x01	; 1
  d8:	a6 e0       	ldi	r26, 0x06	; 6
  da:	b1 e0       	ldi	r27, 0x01	; 1
  dc:	01 c0       	rjmp	.+2      	; 0xe0 <.do_clear_bss_start>

000000de <.do_clear_bss_loop>:
  de:	1d 92       	st	X+, r1

000000e0 <.do_clear_bss_start>:
  e0:	a0 33       	cpi	r26, 0x30	; 48
  e2:	b2 07       	cpc	r27, r18
  e4:	e1 f7       	brne	.-8      	; 0xde <.do_clear_bss_loop>
  e6:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <main>
  ea:	0c 94 f5 07 	jmp	0xfea	; 0xfea <_exit>

000000ee <__bad_interrupt>:
  ee:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000f2 <initSPISlave>:
 */ 
#include "Communication.h"
 
void initSPISlave(void){
	// Set MISO ouptut, others INPUT
	DDR_SPI |= (1<<MISO);
  f2:	24 9a       	sbi	0x04, 4	; 4
	DDR_SPI &= (~(1 << MOSI)) |  (~(1 << SCK )) | (~(1 << SS));
  f4:	84 b1       	in	r24, 0x04	; 4
  f6:	84 b9       	out	0x04, r24	; 4
	// Enable SPI and interrupt
	SPCR0 = (1<<SPE) | (1<<SPIE);
  f8:	80 ec       	ldi	r24, 0xC0	; 192
  fa:	8c bd       	out	0x2c, r24	; 44
	process_joints = false;
  fc:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <__data_end>
 100:	08 95       	ret

00000102 <mapJointsFromSPI>:
}

void mapJointsFromSPI(void){
	int i;
	for(i=0; i<NUM_JOINTS; i++){
 102:	80 e0       	ldi	r24, 0x00	; 0
 104:	90 e0       	ldi	r25, 0x00	; 0
 106:	0e c0       	rjmp	.+28     	; 0x124 <mapJointsFromSPI+0x22>
	// The sixth joint is the gripper
		if(i == 5){
			u_joints_buffer[i] = joints_buffer[i];
 108:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <joints_buffer+0x5>
 10c:	ef e0       	ldi	r30, 0x0F	; 15
 10e:	f1 e0       	ldi	r31, 0x01	; 1
 110:	85 83       	std	Z+5, r24	; 0x05
			// Map joints to [0, 180]
			u_joints_buffer[i] = joints_buffer[i] + 90;
		}
	}
	// Second and fourth joint are reversed
	u_joints_buffer[1] = 180 - u_joints_buffer[1];
 112:	91 81       	ldd	r25, Z+1	; 0x01
 114:	84 eb       	ldi	r24, 0xB4	; 180
 116:	28 2f       	mov	r18, r24
 118:	29 1b       	sub	r18, r25
 11a:	21 83       	std	Z+1, r18	; 0x01
	u_joints_buffer[3] = 180 - u_joints_buffer[3];
 11c:	93 81       	ldd	r25, Z+3	; 0x03
 11e:	89 1b       	sub	r24, r25
 120:	83 83       	std	Z+3, r24	; 0x03
}
 122:	08 95       	ret
		if(i == 5){
			u_joints_buffer[i] = joints_buffer[i];
		}
		else{
			// Map joints to [0, 180]
			u_joints_buffer[i] = joints_buffer[i] + 90;
 124:	fc 01       	movw	r30, r24
 126:	e8 5f       	subi	r30, 0xF8	; 248
 128:	fe 4f       	sbci	r31, 0xFE	; 254
 12a:	20 81       	ld	r18, Z
 12c:	26 5a       	subi	r18, 0xA6	; 166
 12e:	fc 01       	movw	r30, r24
 130:	e1 5f       	subi	r30, 0xF1	; 241
 132:	fe 4f       	sbci	r31, 0xFE	; 254
 134:	20 83       	st	Z, r18
	process_joints = false;
}

void mapJointsFromSPI(void){
	int i;
	for(i=0; i<NUM_JOINTS; i++){
 136:	01 96       	adiw	r24, 0x01	; 1
	// The sixth joint is the gripper
		if(i == 5){
 138:	85 30       	cpi	r24, 0x05	; 5
 13a:	91 05       	cpc	r25, r1
 13c:	99 f7       	brne	.-26     	; 0x124 <mapJointsFromSPI+0x22>
 13e:	e4 cf       	rjmp	.-56     	; 0x108 <mapJointsFromSPI+0x6>

00000140 <checkSPI_status>:
	u_joints_buffer[1] = 180 - u_joints_buffer[1];
	u_joints_buffer[3] = 180 - u_joints_buffer[3];
}

bool checkSPI_status(void){
	return process_joints;
 140:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__data_end>
}
 144:	08 95       	ret

00000146 <clearSPI>:

void clearSPI(void){
	process_joints = false;
 146:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <__data_end>
	joint_number = 0;
 14a:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <joint_number>
 14e:	08 95       	ret

00000150 <getJointsFromSPI>:
}

void getJointsFromSPI(uint8_t* joints){
 150:	cf 93       	push	r28
 152:	df 93       	push	r29
 154:	d8 2f       	mov	r29, r24
 156:	c9 2f       	mov	r28, r25
	mapJointsFromSPI();
 158:	0e 94 81 00 	call	0x102	; 0x102 <mapJointsFromSPI>
 15c:	ed 2f       	mov	r30, r29
 15e:	fc 2f       	mov	r31, r28
	for(int i=0; i<NUM_JOINTS; i++){
 160:	80 e0       	ldi	r24, 0x00	; 0
 162:	90 e0       	ldi	r25, 0x00	; 0
		joints[i] = u_joints_buffer[i];
 164:	dc 01       	movw	r26, r24
 166:	a1 5f       	subi	r26, 0xF1	; 241
 168:	be 4f       	sbci	r27, 0xFE	; 254
 16a:	2c 91       	ld	r18, X
 16c:	21 93       	st	Z+, r18
	joint_number = 0;
}

void getJointsFromSPI(uint8_t* joints){
	mapJointsFromSPI();
	for(int i=0; i<NUM_JOINTS; i++){
 16e:	01 96       	adiw	r24, 0x01	; 1
 170:	86 30       	cpi	r24, 0x06	; 6
 172:	91 05       	cpc	r25, r1
 174:	b9 f7       	brne	.-18     	; 0x164 <getJointsFromSPI+0x14>
		joints[i] = u_joints_buffer[i];
	}
}
 176:	df 91       	pop	r29
 178:	cf 91       	pop	r28
 17a:	08 95       	ret

0000017c <__vector_17>:

ISR(SPI0_STC_vect) {
 17c:	1f 92       	push	r1
 17e:	0f 92       	push	r0
 180:	0f b6       	in	r0, 0x3f	; 63
 182:	0f 92       	push	r0
 184:	11 24       	eor	r1, r1
 186:	8f 93       	push	r24
 188:	9f 93       	push	r25
 18a:	ef 93       	push	r30
 18c:	ff 93       	push	r31
	int8_t joint = SPDR0;
 18e:	8e b5       	in	r24, 0x2e	; 46
	if(joint_number < sizeof(joints_buffer)){
 190:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <joint_number>
 194:	97 30       	cpi	r25, 0x07	; 7
 196:	78 f4       	brcc	.+30     	; 0x1b6 <__vector_17+0x3a>
		// Save joints in buffer
		joints_buffer[joint_number++] = joint;
 198:	e0 91 07 01 	lds	r30, 0x0107	; 0x800107 <joint_number>
 19c:	91 e0       	ldi	r25, 0x01	; 1
 19e:	9e 0f       	add	r25, r30
 1a0:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <joint_number>
 1a4:	f0 e0       	ldi	r31, 0x00	; 0
 1a6:	e8 5f       	subi	r30, 0xF8	; 248
 1a8:	fe 4f       	sbci	r31, 0xFE	; 254
 1aa:	80 83       	st	Z, r24
		// Check if all joint are send
		if(joint == LAST_JOINT_SEND){
 1ac:	84 36       	cpi	r24, 0x64	; 100
 1ae:	19 f4       	brne	.+6      	; 0x1b6 <__vector_17+0x3a>
			process_joints = true;
 1b0:	81 e0       	ldi	r24, 0x01	; 1
 1b2:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <__data_end>
		}
	}
}
 1b6:	ff 91       	pop	r31
 1b8:	ef 91       	pop	r30
 1ba:	9f 91       	pop	r25
 1bc:	8f 91       	pop	r24
 1be:	0f 90       	pop	r0
 1c0:	0f be       	out	0x3f, r0	; 63
 1c2:	0f 90       	pop	r0
 1c4:	1f 90       	pop	r1
 1c6:	18 95       	reti

000001c8 <main>:
#include "ServoDriver.h"

//#include "Debug.h"

int main(void)
{
 1c8:	cf 93       	push	r28
 1ca:	df 93       	push	r29
 1cc:	00 d0       	rcall	.+0      	; 0x1ce <main+0x6>
 1ce:	00 d0       	rcall	.+0      	; 0x1d0 <main+0x8>
 1d0:	00 d0       	rcall	.+0      	; 0x1d2 <main+0xa>
 1d2:	cd b7       	in	r28, 0x3d	; 61
 1d4:	de b7       	in	r29, 0x3e	; 62

	cli();
 1d6:	f8 94       	cli
	wdt_reset();
 1d8:	a8 95       	wdr
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
 1da:	0f b6       	in	r0, 0x3f	; 63
 1dc:	f8 94       	cli
 1de:	a8 95       	wdr
 1e0:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
 1e4:	88 61       	ori	r24, 0x18	; 24
 1e6:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
 1ea:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
 1ee:	0f be       	out	0x3f, r0	; 63
	wdt_disable();
	
	uint8_t joints[NUM_JOINTS] = {90, 90, 90, 90, 90, 0};
 1f0:	86 e0       	ldi	r24, 0x06	; 6
 1f2:	e0 e0       	ldi	r30, 0x00	; 0
 1f4:	f1 e0       	ldi	r31, 0x01	; 1
 1f6:	de 01       	movw	r26, r28
 1f8:	11 96       	adiw	r26, 0x01	; 1
 1fa:	01 90       	ld	r0, Z+
 1fc:	0d 92       	st	X+, r0
 1fe:	8a 95       	dec	r24
 200:	e1 f7       	brne	.-8      	; 0x1fa <main+0x32>
	initSPISlave();
 202:	0e 94 79 00 	call	0xf2	; 0xf2 <initSPISlave>
	//initUART();
	initPWM();
 206:	0e 94 19 01 	call	0x232	; 0x232 <initPWM>
		
	sei();
 20a:	78 94       	sei
	setServoAngles(joints);
 20c:	ce 01       	movw	r24, r28
 20e:	01 96       	adiw	r24, 0x01	; 1
 210:	0e 94 30 03 	call	0x660	; 0x660 <setServoAngles>
    while (1) 
    {
		if( checkSPI_status() ){
 214:	0e 94 a0 00 	call	0x140	; 0x140 <checkSPI_status>
 218:	88 23       	and	r24, r24
 21a:	e1 f3       	breq	.-8      	; 0x214 <main+0x4c>
			getJointsFromSPI(joints);
 21c:	ce 01       	movw	r24, r28
 21e:	01 96       	adiw	r24, 0x01	; 1
 220:	0e 94 a8 00 	call	0x150	; 0x150 <getJointsFromSPI>
			setServoAngles(joints);
 224:	ce 01       	movw	r24, r28
 226:	01 96       	adiw	r24, 0x01	; 1
 228:	0e 94 30 03 	call	0x660	; 0x660 <setServoAngles>
			clearSPI();
 22c:	0e 94 a3 00 	call	0x146	; 0x146 <clearSPI>
 230:	f1 cf       	rjmp	.-30     	; 0x214 <main+0x4c>

00000232 <initPWM>:
	DDR_MOTOR  |= (1<<MOTOR1) | (1<<MOTOR2) | (1<<MOTOR4);
	
}


void softwarePWMServo(double motor1_us, double motor2_us, double motor4_us){
 232:	0f 93       	push	r16
 234:	1f 93       	push	r17
 236:	cf 93       	push	r28
 238:	df 93       	push	r29
 23a:	c0 e8       	ldi	r28, 0x80	; 128
 23c:	d0 e0       	ldi	r29, 0x00	; 0
 23e:	88 81       	ld	r24, Y
 240:	82 60       	ori	r24, 0x02	; 2
 242:	88 83       	st	Y, r24
 244:	41 e8       	ldi	r20, 0x81	; 129
 246:	50 e0       	ldi	r21, 0x00	; 0
 248:	fa 01       	movw	r30, r20
 24a:	80 81       	ld	r24, Z
 24c:	88 61       	ori	r24, 0x18	; 24
 24e:	80 83       	st	Z, r24
 250:	a0 e9       	ldi	r26, 0x90	; 144
 252:	b0 e0       	ldi	r27, 0x00	; 0
 254:	8c 91       	ld	r24, X
 256:	82 60       	ori	r24, 0x02	; 2
 258:	8c 93       	st	X, r24
 25a:	21 e9       	ldi	r18, 0x91	; 145
 25c:	30 e0       	ldi	r19, 0x00	; 0
 25e:	f9 01       	movw	r30, r18
 260:	80 81       	ld	r24, Z
 262:	88 61       	ori	r24, 0x18	; 24
 264:	80 83       	st	Z, r24
 266:	00 ea       	ldi	r16, 0xA0	; 160
 268:	10 e0       	ldi	r17, 0x00	; 0
 26a:	f8 01       	movw	r30, r16
 26c:	80 81       	ld	r24, Z
 26e:	82 60       	ori	r24, 0x02	; 2
 270:	80 83       	st	Z, r24
 272:	81 ea       	ldi	r24, 0xA1	; 161
 274:	90 e0       	ldi	r25, 0x00	; 0
 276:	fc 01       	movw	r30, r24
 278:	60 81       	ld	r22, Z
 27a:	68 61       	ori	r22, 0x18	; 24
 27c:	60 83       	st	Z, r22
 27e:	fa 01       	movw	r30, r20
 280:	60 81       	ld	r22, Z
 282:	62 60       	ori	r22, 0x02	; 2
 284:	60 83       	st	Z, r22
 286:	f9 01       	movw	r30, r18
 288:	40 81       	ld	r20, Z
 28a:	42 60       	ori	r20, 0x02	; 2
 28c:	40 83       	st	Z, r20
 28e:	fc 01       	movw	r30, r24
 290:	20 81       	ld	r18, Z
 292:	22 60       	ori	r18, 0x02	; 2
 294:	20 83       	st	Z, r18
 296:	80 e4       	ldi	r24, 0x40	; 64
 298:	9c e9       	ldi	r25, 0x9C	; 156
 29a:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
 29e:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
 2a2:	90 93 97 00 	sts	0x0097, r25	; 0x800097 <__TEXT_REGION_LENGTH__+0x7e0097>
 2a6:	80 93 96 00 	sts	0x0096, r24	; 0x800096 <__TEXT_REGION_LENGTH__+0x7e0096>
 2aa:	90 93 a7 00 	sts	0x00A7, r25	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7e00a7>
 2ae:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
 2b2:	88 81       	ld	r24, Y
 2b4:	80 68       	ori	r24, 0x80	; 128
 2b6:	88 83       	st	Y, r24
 2b8:	8c 91       	ld	r24, X
 2ba:	80 68       	ori	r24, 0x80	; 128
 2bc:	8c 93       	st	X, r24
 2be:	f8 01       	movw	r30, r16
 2c0:	80 81       	ld	r24, Z
 2c2:	80 68       	ori	r24, 0x80	; 128
 2c4:	80 83       	st	Z, r24
 2c6:	8a b1       	in	r24, 0x0a	; 10
 2c8:	83 60       	ori	r24, 0x03	; 3
 2ca:	8a b9       	out	0x0a, r24	; 10
 2cc:	21 9a       	sbi	0x04, 1	; 4
 2ce:	85 b5       	in	r24, 0x25	; 37
 2d0:	85 60       	ori	r24, 0x05	; 5
 2d2:	85 bd       	out	0x25, r24	; 37
 2d4:	ee e6       	ldi	r30, 0x6E	; 110
 2d6:	f0 e0       	ldi	r31, 0x00	; 0
 2d8:	80 81       	ld	r24, Z
 2da:	81 60       	ori	r24, 0x01	; 1
 2dc:	80 83       	st	Z, r24
 2de:	8a b1       	in	r24, 0x0a	; 10
 2e0:	88 66       	ori	r24, 0x68	; 104
 2e2:	8a b9       	out	0x0a, r24	; 10
 2e4:	df 91       	pop	r29
 2e6:	cf 91       	pop	r28
 2e8:	1f 91       	pop	r17
 2ea:	0f 91       	pop	r16
 2ec:	08 95       	ret

000002ee <anglesToMiliSec>:
	servo6_us = angles_in_ms[5]*2;
	
	delay_determine();
 }

void anglesToMiliSec(uint8_t* servo_angles, uint16_t* servo_angles_ms){
 2ee:	af 92       	push	r10
 2f0:	bf 92       	push	r11
 2f2:	cf 92       	push	r12
 2f4:	df 92       	push	r13
 2f6:	ef 92       	push	r14
 2f8:	ff 92       	push	r15
 2fa:	0f 93       	push	r16
 2fc:	1f 93       	push	r17
 2fe:	cf 93       	push	r28
 300:	df 93       	push	r29
 302:	5c 01       	movw	r10, r24
 304:	6b 01       	movw	r12, r22
 306:	8c 01       	movw	r16, r24
 308:	eb 01       	movw	r28, r22
 30a:	7b 01       	movw	r14, r22
 30c:	8a e0       	ldi	r24, 0x0A	; 10
 30e:	e8 0e       	add	r14, r24
 310:	f1 1c       	adc	r15, r1
	uint8_t angle_num = 0;
	float temp_angle = 0.0;
	
	// Mapping arm
	for(angle_num=0; angle_num< ( NUM_JOINTS - 1); angle_num++){
		temp_angle = servo_angles[angle_num];
 312:	f8 01       	movw	r30, r16
 314:	61 91       	ld	r22, Z+
 316:	8f 01       	movw	r16, r30
 318:	70 e0       	ldi	r23, 0x00	; 0
 31a:	80 e0       	ldi	r24, 0x00	; 0
 31c:	90 e0       	ldi	r25, 0x00	; 0
 31e:	0e 94 d1 06 	call	0xda2	; 0xda2 <__floatunsisf>
		temp_angle = temp_angle - angles_min;
		// Map to 0-1
		temp_angle = (temp_angle - angles_min)/(angles_max - angles_min);
 322:	20 e0       	ldi	r18, 0x00	; 0
 324:	30 e0       	ldi	r19, 0x00	; 0
 326:	44 e3       	ldi	r20, 0x34	; 52
 328:	53 e4       	ldi	r21, 0x43	; 67
 32a:	0e 94 30 06 	call	0xc60	; 0xc60 <__divsf3>
		// Map to 0-max_ms
		temp_angle = temp_angle*(max_ms  - min_ms);
 32e:	20 e0       	ldi	r18, 0x00	; 0
 330:	30 ec       	ldi	r19, 0xC0	; 192
 332:	43 ef       	ldi	r20, 0xF3	; 243
 334:	54 e4       	ldi	r21, 0x44	; 68
 336:	0e 94 88 07 	call	0xf10	; 0xf10 <__mulsf3>
		// map to min_ms-max_ms
		temp_angle = temp_angle + min_ms;
		servo_angles_ms[angle_num] = (uint16_t) temp_angle;
 33a:	20 e0       	ldi	r18, 0x00	; 0
 33c:	30 e0       	ldi	r19, 0x00	; 0
 33e:	4a ef       	ldi	r20, 0xFA	; 250
 340:	53 e4       	ldi	r21, 0x43	; 67
 342:	0e 94 bf 05 	call	0xb7e	; 0xb7e <__addsf3>
 346:	0e 94 a2 06 	call	0xd44	; 0xd44 <__fixunssfsi>
 34a:	69 93       	st	Y+, r22
 34c:	79 93       	st	Y+, r23
	
	uint8_t angle_num = 0;
	float temp_angle = 0.0;
	
	// Mapping arm
	for(angle_num=0; angle_num< ( NUM_JOINTS - 1); angle_num++){
 34e:	ce 15       	cp	r28, r14
 350:	df 05       	cpc	r29, r15
 352:	f9 f6       	brne	.-66     	; 0x312 <anglesToMiliSec+0x24>
		servo_angles_ms[angle_num] = (uint16_t) temp_angle;
	}
	
	// Gripper mapping
	// Take the last angle from the array
	temp_angle = servo_angles[GRIPPER_JOINT-1];
 354:	f5 01       	movw	r30, r10
 356:	65 81       	ldd	r22, Z+5	; 0x05
 358:	70 e0       	ldi	r23, 0x00	; 0
 35a:	80 e0       	ldi	r24, 0x00	; 0
 35c:	90 e0       	ldi	r25, 0x00	; 0
 35e:	0e 94 d1 06 	call	0xda2	; 0xda2 <__floatunsisf>
	temp_angle = temp_angle - angles_min;
	// Map to 0-1
	temp_angle = (temp_angle - angles_min)/(angles_max - angles_min);
 362:	20 e0       	ldi	r18, 0x00	; 0
 364:	30 e0       	ldi	r19, 0x00	; 0
 366:	44 e3       	ldi	r20, 0x34	; 52
 368:	53 e4       	ldi	r21, 0x43	; 67
 36a:	0e 94 30 06 	call	0xc60	; 0xc60 <__divsf3>
	// Map to 0-max_ms_gripper
	temp_angle = temp_angle*(max_ms_gripper  - min_ms_gripper);
 36e:	20 e0       	ldi	r18, 0x00	; 0
 370:	30 e0       	ldi	r19, 0x00	; 0
 372:	46 e1       	ldi	r20, 0x16	; 22
 374:	54 e4       	ldi	r21, 0x44	; 68
 376:	0e 94 88 07 	call	0xf10	; 0xf10 <__mulsf3>
	// map to min_ms_gripper-max_ms_gripper
	temp_angle = temp_angle + min_ms_gripper;
	servo_angles_ms[GRIPPER_JOINT - 1] = (uint16_t) temp_angle;
 37a:	20 e0       	ldi	r18, 0x00	; 0
 37c:	30 e0       	ldi	r19, 0x00	; 0
 37e:	46 e1       	ldi	r20, 0x16	; 22
 380:	54 e4       	ldi	r21, 0x44	; 68
 382:	0e 94 bf 05 	call	0xb7e	; 0xb7e <__addsf3>
 386:	0e 94 a2 06 	call	0xd44	; 0xd44 <__fixunssfsi>
 38a:	f6 01       	movw	r30, r12
 38c:	73 87       	std	Z+11, r23	; 0x0b
 38e:	62 87       	std	Z+10, r22	; 0x0a
}
 390:	df 91       	pop	r29
 392:	cf 91       	pop	r28
 394:	1f 91       	pop	r17
 396:	0f 91       	pop	r16
 398:	ff 90       	pop	r15
 39a:	ef 90       	pop	r14
 39c:	df 90       	pop	r13
 39e:	cf 90       	pop	r12
 3a0:	bf 90       	pop	r11
 3a2:	af 90       	pop	r10
 3a4:	08 95       	ret

000003a6 <delay_determine>:

void delay_determine(){	
	// Find minimum, maximum and middle delay 
	
	if (servo1_us > servo2_us){
 3a6:	60 91 15 01 	lds	r22, 0x0115	; 0x800115 <servo1_us>
 3aa:	70 91 16 01 	lds	r23, 0x0116	; 0x800116 <servo1_us+0x1>
 3ae:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <servo1_us+0x2>
 3b2:	90 91 18 01 	lds	r25, 0x0118	; 0x800118 <servo1_us+0x3>
 3b6:	20 91 2c 01 	lds	r18, 0x012C	; 0x80012c <servo2_us>
 3ba:	30 91 2d 01 	lds	r19, 0x012D	; 0x80012d <servo2_us+0x1>
 3be:	40 91 2e 01 	lds	r20, 0x012E	; 0x80012e <servo2_us+0x2>
 3c2:	50 91 2f 01 	lds	r21, 0x012F	; 0x80012f <servo2_us+0x3>
 3c6:	0e 94 83 07 	call	0xf06	; 0xf06 <__gesf2>
 3ca:	18 16       	cp	r1, r24
 3cc:	0c f0       	brlt	.+2      	; 0x3d0 <delay_determine+0x2a>
 3ce:	a4 c0       	rjmp	.+328    	; 0x518 <__LOCK_REGION_LENGTH__+0x118>
		if(servo1_us > servo4_us){
 3d0:	60 91 15 01 	lds	r22, 0x0115	; 0x800115 <servo1_us>
 3d4:	70 91 16 01 	lds	r23, 0x0116	; 0x800116 <servo1_us+0x1>
 3d8:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <servo1_us+0x2>
 3dc:	90 91 18 01 	lds	r25, 0x0118	; 0x800118 <servo1_us+0x3>
 3e0:	20 91 19 01 	lds	r18, 0x0119	; 0x800119 <servo4_us>
 3e4:	30 91 1a 01 	lds	r19, 0x011A	; 0x80011a <servo4_us+0x1>
 3e8:	40 91 1b 01 	lds	r20, 0x011B	; 0x80011b <servo4_us+0x2>
 3ec:	50 91 1c 01 	lds	r21, 0x011C	; 0x80011c <servo4_us+0x3>
 3f0:	0e 94 83 07 	call	0xf06	; 0xf06 <__gesf2>
 3f4:	18 16       	cp	r1, r24
 3f6:	0c f0       	brlt	.+2      	; 0x3fa <delay_determine+0x54>
 3f8:	62 c0       	rjmp	.+196    	; 0x4be <__LOCK_REGION_LENGTH__+0xbe>
			servo_delay.max_delay = servo1_us;
 3fa:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <servo1_us>
 3fe:	90 91 16 01 	lds	r25, 0x0116	; 0x800116 <servo1_us+0x1>
 402:	a0 91 17 01 	lds	r26, 0x0117	; 0x800117 <servo1_us+0x2>
 406:	b0 91 18 01 	lds	r27, 0x0118	; 0x800118 <servo1_us+0x3>
 40a:	ed e1       	ldi	r30, 0x1D	; 29
 40c:	f1 e0       	ldi	r31, 0x01	; 1
 40e:	80 87       	std	Z+8, r24	; 0x08
 410:	91 87       	std	Z+9, r25	; 0x09
 412:	a2 87       	std	Z+10, r26	; 0x0a
 414:	b3 87       	std	Z+11, r27	; 0x0b
			servo_delay.max_delay_motor = MOTOR1;
 416:	86 e0       	ldi	r24, 0x06	; 6
 418:	86 87       	std	Z+14, r24	; 0x0e
			if(servo4_us > servo2_us){
 41a:	60 91 19 01 	lds	r22, 0x0119	; 0x800119 <servo4_us>
 41e:	70 91 1a 01 	lds	r23, 0x011A	; 0x80011a <servo4_us+0x1>
 422:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <servo4_us+0x2>
 426:	90 91 1c 01 	lds	r25, 0x011C	; 0x80011c <servo4_us+0x3>
 42a:	20 91 2c 01 	lds	r18, 0x012C	; 0x80012c <servo2_us>
 42e:	30 91 2d 01 	lds	r19, 0x012D	; 0x80012d <servo2_us+0x1>
 432:	40 91 2e 01 	lds	r20, 0x012E	; 0x80012e <servo2_us+0x2>
 436:	50 91 2f 01 	lds	r21, 0x012F	; 0x80012f <servo2_us+0x3>
 43a:	0e 94 83 07 	call	0xf06	; 0xf06 <__gesf2>
 43e:	18 16       	cp	r1, r24
 440:	fc f4       	brge	.+62     	; 0x480 <__LOCK_REGION_LENGTH__+0x80>
				servo_delay.mid_delay = servo4_us;
 442:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <servo4_us>
 446:	90 91 1a 01 	lds	r25, 0x011A	; 0x80011a <servo4_us+0x1>
 44a:	a0 91 1b 01 	lds	r26, 0x011B	; 0x80011b <servo4_us+0x2>
 44e:	b0 91 1c 01 	lds	r27, 0x011C	; 0x80011c <servo4_us+0x3>
 452:	ed e1       	ldi	r30, 0x1D	; 29
 454:	f1 e0       	ldi	r31, 0x01	; 1
 456:	84 83       	std	Z+4, r24	; 0x04
 458:	95 83       	std	Z+5, r25	; 0x05
 45a:	a6 83       	std	Z+6, r26	; 0x06
 45c:	b7 83       	std	Z+7, r27	; 0x07
				servo_delay.min_delay = servo2_us;
 45e:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <servo2_us>
 462:	90 91 2d 01 	lds	r25, 0x012D	; 0x80012d <servo2_us+0x1>
 466:	a0 91 2e 01 	lds	r26, 0x012E	; 0x80012e <servo2_us+0x2>
 46a:	b0 91 2f 01 	lds	r27, 0x012F	; 0x80012f <servo2_us+0x3>
 46e:	80 83       	st	Z, r24
 470:	91 83       	std	Z+1, r25	; 0x01
 472:	a2 83       	std	Z+2, r26	; 0x02
 474:	b3 83       	std	Z+3, r27	; 0x03
				servo_delay.mid_delay_motor = MOTOR4;
 476:	83 e0       	ldi	r24, 0x03	; 3
 478:	85 87       	std	Z+13, r24	; 0x0d
				servo_delay.min_delay_motor = MOTOR2;
 47a:	85 e0       	ldi	r24, 0x05	; 5
 47c:	84 87       	std	Z+12, r24	; 0x0c
 47e:	08 95       	ret
			}
			else{
				servo_delay.mid_delay = servo2_us;
 480:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <servo2_us>
 484:	90 91 2d 01 	lds	r25, 0x012D	; 0x80012d <servo2_us+0x1>
 488:	a0 91 2e 01 	lds	r26, 0x012E	; 0x80012e <servo2_us+0x2>
 48c:	b0 91 2f 01 	lds	r27, 0x012F	; 0x80012f <servo2_us+0x3>
 490:	ed e1       	ldi	r30, 0x1D	; 29
 492:	f1 e0       	ldi	r31, 0x01	; 1
 494:	84 83       	std	Z+4, r24	; 0x04
 496:	95 83       	std	Z+5, r25	; 0x05
 498:	a6 83       	std	Z+6, r26	; 0x06
 49a:	b7 83       	std	Z+7, r27	; 0x07
				servo_delay.min_delay = servo4_us;
 49c:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <servo4_us>
 4a0:	90 91 1a 01 	lds	r25, 0x011A	; 0x80011a <servo4_us+0x1>
 4a4:	a0 91 1b 01 	lds	r26, 0x011B	; 0x80011b <servo4_us+0x2>
 4a8:	b0 91 1c 01 	lds	r27, 0x011C	; 0x80011c <servo4_us+0x3>
 4ac:	80 83       	st	Z, r24
 4ae:	91 83       	std	Z+1, r25	; 0x01
 4b0:	a2 83       	std	Z+2, r26	; 0x02
 4b2:	b3 83       	std	Z+3, r27	; 0x03
				servo_delay.mid_delay_motor = MOTOR2;
 4b4:	85 e0       	ldi	r24, 0x05	; 5
 4b6:	85 87       	std	Z+13, r24	; 0x0d
				servo_delay.min_delay_motor = MOTOR4;
 4b8:	83 e0       	ldi	r24, 0x03	; 3
 4ba:	84 87       	std	Z+12, r24	; 0x0c
 4bc:	08 95       	ret
			}
		}
		else{
			servo_delay.max_delay = servo4_us;
 4be:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <servo4_us>
 4c2:	90 91 1a 01 	lds	r25, 0x011A	; 0x80011a <servo4_us+0x1>
 4c6:	a0 91 1b 01 	lds	r26, 0x011B	; 0x80011b <servo4_us+0x2>
 4ca:	b0 91 1c 01 	lds	r27, 0x011C	; 0x80011c <servo4_us+0x3>
 4ce:	ed e1       	ldi	r30, 0x1D	; 29
 4d0:	f1 e0       	ldi	r31, 0x01	; 1
 4d2:	80 87       	std	Z+8, r24	; 0x08
 4d4:	91 87       	std	Z+9, r25	; 0x09
 4d6:	a2 87       	std	Z+10, r26	; 0x0a
 4d8:	b3 87       	std	Z+11, r27	; 0x0b
			servo_delay.mid_delay = servo1_us;
 4da:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <servo1_us>
 4de:	90 91 16 01 	lds	r25, 0x0116	; 0x800116 <servo1_us+0x1>
 4e2:	a0 91 17 01 	lds	r26, 0x0117	; 0x800117 <servo1_us+0x2>
 4e6:	b0 91 18 01 	lds	r27, 0x0118	; 0x800118 <servo1_us+0x3>
 4ea:	84 83       	std	Z+4, r24	; 0x04
 4ec:	95 83       	std	Z+5, r25	; 0x05
 4ee:	a6 83       	std	Z+6, r26	; 0x06
 4f0:	b7 83       	std	Z+7, r27	; 0x07
			servo_delay.min_delay = servo2_us;
 4f2:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <servo2_us>
 4f6:	90 91 2d 01 	lds	r25, 0x012D	; 0x80012d <servo2_us+0x1>
 4fa:	a0 91 2e 01 	lds	r26, 0x012E	; 0x80012e <servo2_us+0x2>
 4fe:	b0 91 2f 01 	lds	r27, 0x012F	; 0x80012f <servo2_us+0x3>
 502:	80 83       	st	Z, r24
 504:	91 83       	std	Z+1, r25	; 0x01
 506:	a2 83       	std	Z+2, r26	; 0x02
 508:	b3 83       	std	Z+3, r27	; 0x03
			
			servo_delay.max_delay_motor = MOTOR4;
 50a:	83 e0       	ldi	r24, 0x03	; 3
 50c:	86 87       	std	Z+14, r24	; 0x0e
			servo_delay.mid_delay_motor = MOTOR1;
 50e:	86 e0       	ldi	r24, 0x06	; 6
 510:	85 87       	std	Z+13, r24	; 0x0d
			servo_delay.min_delay_motor = MOTOR2;
 512:	85 e0       	ldi	r24, 0x05	; 5
 514:	84 87       	std	Z+12, r24	; 0x0c
 516:	08 95       	ret
		}
	}
	else if(servo2_us > servo4_us){
 518:	60 91 2c 01 	lds	r22, 0x012C	; 0x80012c <servo2_us>
 51c:	70 91 2d 01 	lds	r23, 0x012D	; 0x80012d <servo2_us+0x1>
 520:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <servo2_us+0x2>
 524:	90 91 2f 01 	lds	r25, 0x012F	; 0x80012f <servo2_us+0x3>
 528:	20 91 19 01 	lds	r18, 0x0119	; 0x800119 <servo4_us>
 52c:	30 91 1a 01 	lds	r19, 0x011A	; 0x80011a <servo4_us+0x1>
 530:	40 91 1b 01 	lds	r20, 0x011B	; 0x80011b <servo4_us+0x2>
 534:	50 91 1c 01 	lds	r21, 0x011C	; 0x80011c <servo4_us+0x3>
 538:	0e 94 83 07 	call	0xf06	; 0xf06 <__gesf2>
 53c:	18 16       	cp	r1, r24
 53e:	0c f0       	brlt	.+2      	; 0x542 <__LOCK_REGION_LENGTH__+0x142>
 540:	62 c0       	rjmp	.+196    	; 0x606 <__LOCK_REGION_LENGTH__+0x206>
		servo_delay.max_delay = servo2_us;
 542:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <servo2_us>
 546:	90 91 2d 01 	lds	r25, 0x012D	; 0x80012d <servo2_us+0x1>
 54a:	a0 91 2e 01 	lds	r26, 0x012E	; 0x80012e <servo2_us+0x2>
 54e:	b0 91 2f 01 	lds	r27, 0x012F	; 0x80012f <servo2_us+0x3>
 552:	ed e1       	ldi	r30, 0x1D	; 29
 554:	f1 e0       	ldi	r31, 0x01	; 1
 556:	80 87       	std	Z+8, r24	; 0x08
 558:	91 87       	std	Z+9, r25	; 0x09
 55a:	a2 87       	std	Z+10, r26	; 0x0a
 55c:	b3 87       	std	Z+11, r27	; 0x0b
		servo_delay.max_delay_motor = MOTOR2;
 55e:	85 e0       	ldi	r24, 0x05	; 5
 560:	86 87       	std	Z+14, r24	; 0x0e
		if(servo1_us > servo4_us){
 562:	60 91 15 01 	lds	r22, 0x0115	; 0x800115 <servo1_us>
 566:	70 91 16 01 	lds	r23, 0x0116	; 0x800116 <servo1_us+0x1>
 56a:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <servo1_us+0x2>
 56e:	90 91 18 01 	lds	r25, 0x0118	; 0x800118 <servo1_us+0x3>
 572:	20 91 19 01 	lds	r18, 0x0119	; 0x800119 <servo4_us>
 576:	30 91 1a 01 	lds	r19, 0x011A	; 0x80011a <servo4_us+0x1>
 57a:	40 91 1b 01 	lds	r20, 0x011B	; 0x80011b <servo4_us+0x2>
 57e:	50 91 1c 01 	lds	r21, 0x011C	; 0x80011c <servo4_us+0x3>
 582:	0e 94 83 07 	call	0xf06	; 0xf06 <__gesf2>
 586:	18 16       	cp	r1, r24
 588:	fc f4       	brge	.+62     	; 0x5c8 <__LOCK_REGION_LENGTH__+0x1c8>
			servo_delay.mid_delay = servo1_us;
 58a:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <servo1_us>
 58e:	90 91 16 01 	lds	r25, 0x0116	; 0x800116 <servo1_us+0x1>
 592:	a0 91 17 01 	lds	r26, 0x0117	; 0x800117 <servo1_us+0x2>
 596:	b0 91 18 01 	lds	r27, 0x0118	; 0x800118 <servo1_us+0x3>
 59a:	ed e1       	ldi	r30, 0x1D	; 29
 59c:	f1 e0       	ldi	r31, 0x01	; 1
 59e:	84 83       	std	Z+4, r24	; 0x04
 5a0:	95 83       	std	Z+5, r25	; 0x05
 5a2:	a6 83       	std	Z+6, r26	; 0x06
 5a4:	b7 83       	std	Z+7, r27	; 0x07
			servo_delay.min_delay = servo4_us;
 5a6:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <servo4_us>
 5aa:	90 91 1a 01 	lds	r25, 0x011A	; 0x80011a <servo4_us+0x1>
 5ae:	a0 91 1b 01 	lds	r26, 0x011B	; 0x80011b <servo4_us+0x2>
 5b2:	b0 91 1c 01 	lds	r27, 0x011C	; 0x80011c <servo4_us+0x3>
 5b6:	80 83       	st	Z, r24
 5b8:	91 83       	std	Z+1, r25	; 0x01
 5ba:	a2 83       	std	Z+2, r26	; 0x02
 5bc:	b3 83       	std	Z+3, r27	; 0x03
			servo_delay.mid_delay_motor = MOTOR1;
 5be:	86 e0       	ldi	r24, 0x06	; 6
 5c0:	85 87       	std	Z+13, r24	; 0x0d
			servo_delay.min_delay_motor = MOTOR4;
 5c2:	83 e0       	ldi	r24, 0x03	; 3
 5c4:	84 87       	std	Z+12, r24	; 0x0c
 5c6:	08 95       	ret
		}
		else{
			servo_delay.mid_delay = servo4_us;
 5c8:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <servo4_us>
 5cc:	90 91 1a 01 	lds	r25, 0x011A	; 0x80011a <servo4_us+0x1>
 5d0:	a0 91 1b 01 	lds	r26, 0x011B	; 0x80011b <servo4_us+0x2>
 5d4:	b0 91 1c 01 	lds	r27, 0x011C	; 0x80011c <servo4_us+0x3>
 5d8:	ed e1       	ldi	r30, 0x1D	; 29
 5da:	f1 e0       	ldi	r31, 0x01	; 1
 5dc:	84 83       	std	Z+4, r24	; 0x04
 5de:	95 83       	std	Z+5, r25	; 0x05
 5e0:	a6 83       	std	Z+6, r26	; 0x06
 5e2:	b7 83       	std	Z+7, r27	; 0x07
			servo_delay.min_delay = servo1_us;
 5e4:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <servo1_us>
 5e8:	90 91 16 01 	lds	r25, 0x0116	; 0x800116 <servo1_us+0x1>
 5ec:	a0 91 17 01 	lds	r26, 0x0117	; 0x800117 <servo1_us+0x2>
 5f0:	b0 91 18 01 	lds	r27, 0x0118	; 0x800118 <servo1_us+0x3>
 5f4:	80 83       	st	Z, r24
 5f6:	91 83       	std	Z+1, r25	; 0x01
 5f8:	a2 83       	std	Z+2, r26	; 0x02
 5fa:	b3 83       	std	Z+3, r27	; 0x03
			servo_delay.mid_delay_motor = MOTOR4;
 5fc:	83 e0       	ldi	r24, 0x03	; 3
 5fe:	85 87       	std	Z+13, r24	; 0x0d
			servo_delay.min_delay_motor = MOTOR1;
 600:	86 e0       	ldi	r24, 0x06	; 6
 602:	84 87       	std	Z+12, r24	; 0x0c
 604:	08 95       	ret
		}
	}
	else{
		servo_delay.max_delay = servo4_us;
 606:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <servo4_us>
 60a:	90 91 1a 01 	lds	r25, 0x011A	; 0x80011a <servo4_us+0x1>
 60e:	a0 91 1b 01 	lds	r26, 0x011B	; 0x80011b <servo4_us+0x2>
 612:	b0 91 1c 01 	lds	r27, 0x011C	; 0x80011c <servo4_us+0x3>
 616:	ed e1       	ldi	r30, 0x1D	; 29
 618:	f1 e0       	ldi	r31, 0x01	; 1
 61a:	80 87       	std	Z+8, r24	; 0x08
 61c:	91 87       	std	Z+9, r25	; 0x09
 61e:	a2 87       	std	Z+10, r26	; 0x0a
 620:	b3 87       	std	Z+11, r27	; 0x0b
		servo_delay.mid_delay = servo2_us;
 622:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <servo2_us>
 626:	90 91 2d 01 	lds	r25, 0x012D	; 0x80012d <servo2_us+0x1>
 62a:	a0 91 2e 01 	lds	r26, 0x012E	; 0x80012e <servo2_us+0x2>
 62e:	b0 91 2f 01 	lds	r27, 0x012F	; 0x80012f <servo2_us+0x3>
 632:	84 83       	std	Z+4, r24	; 0x04
 634:	95 83       	std	Z+5, r25	; 0x05
 636:	a6 83       	std	Z+6, r26	; 0x06
 638:	b7 83       	std	Z+7, r27	; 0x07
		servo_delay.min_delay = servo1_us;
 63a:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <servo1_us>
 63e:	90 91 16 01 	lds	r25, 0x0116	; 0x800116 <servo1_us+0x1>
 642:	a0 91 17 01 	lds	r26, 0x0117	; 0x800117 <servo1_us+0x2>
 646:	b0 91 18 01 	lds	r27, 0x0118	; 0x800118 <servo1_us+0x3>
 64a:	80 83       	st	Z, r24
 64c:	91 83       	std	Z+1, r25	; 0x01
 64e:	a2 83       	std	Z+2, r26	; 0x02
 650:	b3 83       	std	Z+3, r27	; 0x03
		servo_delay.max_delay_motor = MOTOR4;
 652:	83 e0       	ldi	r24, 0x03	; 3
 654:	86 87       	std	Z+14, r24	; 0x0e
		servo_delay.mid_delay_motor = MOTOR2;
 656:	85 e0       	ldi	r24, 0x05	; 5
 658:	85 87       	std	Z+13, r24	; 0x0d
		servo_delay.min_delay_motor = MOTOR1;
 65a:	86 e0       	ldi	r24, 0x06	; 6
 65c:	84 87       	std	Z+12, r24	; 0x0c
 65e:	08 95       	ret

00000660 <setServoAngles>:
	// wait for the lowest delay set  the pin with lowest microseconds
	// low wait for middle-lowest set pin with middle delay low
	// w8 for highest-middle set highest delay motor low	
}

void setServoAngles(uint8_t* angles){
 660:	cf 93       	push	r28
 662:	df 93       	push	r29
 664:	cd b7       	in	r28, 0x3d	; 61
 666:	de b7       	in	r29, 0x3e	; 62
 668:	2c 97       	sbiw	r28, 0x0c	; 12
 66a:	0f b6       	in	r0, 0x3f	; 63
 66c:	f8 94       	cli
 66e:	de bf       	out	0x3e, r29	; 62
 670:	0f be       	out	0x3f, r0	; 63
 672:	cd bf       	out	0x3d, r28	; 61
	
	uint16_t angles_in_ms[NUM_JOINTS];

	// Map joint angles from [0; 180] to [500; 2500]
	// except for the gripper he is mapped to [600; 1200]
	anglesToMiliSec(angles, angles_in_ms);
 674:	be 01       	movw	r22, r28
 676:	6f 5f       	subi	r22, 0xFF	; 255
 678:	7f 4f       	sbci	r23, 0xFF	; 255
 67a:	0e 94 77 01 	call	0x2ee	; 0x2ee <anglesToMiliSec>
 67e:	fe 01       	movw	r30, r28
 680:	31 96       	adiw	r30, 0x01	; 1
 682:	9e 01       	movw	r18, r28
 684:	25 5f       	subi	r18, 0xF5	; 245
 686:	3f 4f       	sbci	r19, 0xFF	; 255

	for(int i=0; i<NUM_JOINTS-1; i++){
		if(angles_in_ms[i] >2500){
			angles_in_ms[i] = 2500;
 688:	44 ec       	ldi	r20, 0xC4	; 196
 68a:	59 e0       	ldi	r21, 0x09	; 9
	// Map joint angles from [0; 180] to [500; 2500]
	// except for the gripper he is mapped to [600; 1200]
	anglesToMiliSec(angles, angles_in_ms);

	for(int i=0; i<NUM_JOINTS-1; i++){
		if(angles_in_ms[i] >2500){
 68c:	80 81       	ld	r24, Z
 68e:	91 81       	ldd	r25, Z+1	; 0x01
 690:	85 3c       	cpi	r24, 0xC5	; 197
 692:	99 40       	sbci	r25, 0x09	; 9
 694:	10 f0       	brcs	.+4      	; 0x69a <setServoAngles+0x3a>
			angles_in_ms[i] = 2500;
 696:	51 83       	std	Z+1, r21	; 0x01
 698:	40 83       	st	Z, r20
 69a:	32 96       	adiw	r30, 0x02	; 2

	// Map joint angles from [0; 180] to [500; 2500]
	// except for the gripper he is mapped to [600; 1200]
	anglesToMiliSec(angles, angles_in_ms);

	for(int i=0; i<NUM_JOINTS-1; i++){
 69c:	e2 17       	cp	r30, r18
 69e:	f3 07       	cpc	r31, r19
 6a0:	a9 f7       	brne	.-22     	; 0x68c <setServoAngles+0x2c>
		if(angles_in_ms[i] >2500){
			angles_in_ms[i] = 2500;
		}
	}	
	
	servo1_us = (double) (angles_in_ms[0]);
 6a2:	69 81       	ldd	r22, Y+1	; 0x01
 6a4:	7a 81       	ldd	r23, Y+2	; 0x02
 6a6:	80 e0       	ldi	r24, 0x00	; 0
 6a8:	90 e0       	ldi	r25, 0x00	; 0
 6aa:	0e 94 d1 06 	call	0xda2	; 0xda2 <__floatunsisf>
 6ae:	60 93 15 01 	sts	0x0115, r22	; 0x800115 <servo1_us>
 6b2:	70 93 16 01 	sts	0x0116, r23	; 0x800116 <servo1_us+0x1>
 6b6:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <servo1_us+0x2>
 6ba:	90 93 18 01 	sts	0x0118, r25	; 0x800118 <servo1_us+0x3>
	servo2_us = (double) angles_in_ms[1];
 6be:	6b 81       	ldd	r22, Y+3	; 0x03
 6c0:	7c 81       	ldd	r23, Y+4	; 0x04
 6c2:	80 e0       	ldi	r24, 0x00	; 0
 6c4:	90 e0       	ldi	r25, 0x00	; 0
 6c6:	0e 94 d1 06 	call	0xda2	; 0xda2 <__floatunsisf>
 6ca:	60 93 2c 01 	sts	0x012C, r22	; 0x80012c <servo2_us>
 6ce:	70 93 2d 01 	sts	0x012D, r23	; 0x80012d <servo2_us+0x1>
 6d2:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <servo2_us+0x2>
 6d6:	90 93 2f 01 	sts	0x012F, r25	; 0x80012f <servo2_us+0x3>
	servo3_us = angles_in_ms[2]*2;
 6da:	8d 81       	ldd	r24, Y+5	; 0x05
 6dc:	9e 81       	ldd	r25, Y+6	; 0x06
 6de:	88 0f       	add	r24, r24
 6e0:	99 1f       	adc	r25, r25
 6e2:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 6e6:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
	servo4_us = (double) angles_in_ms[3];
 6ea:	6f 81       	ldd	r22, Y+7	; 0x07
 6ec:	78 85       	ldd	r23, Y+8	; 0x08
 6ee:	80 e0       	ldi	r24, 0x00	; 0
 6f0:	90 e0       	ldi	r25, 0x00	; 0
 6f2:	0e 94 d1 06 	call	0xda2	; 0xda2 <__floatunsisf>
 6f6:	60 93 19 01 	sts	0x0119, r22	; 0x800119 <servo4_us>
 6fa:	70 93 1a 01 	sts	0x011A, r23	; 0x80011a <servo4_us+0x1>
 6fe:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <servo4_us+0x2>
 702:	90 93 1c 01 	sts	0x011C, r25	; 0x80011c <servo4_us+0x3>
	servo5_us = angles_in_ms[4]*2;
 706:	89 85       	ldd	r24, Y+9	; 0x09
 708:	9a 85       	ldd	r25, Y+10	; 0x0a
 70a:	88 0f       	add	r24, r24
 70c:	99 1f       	adc	r25, r25
 70e:	90 93 a9 00 	sts	0x00A9, r25	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
 712:	80 93 a8 00 	sts	0x00A8, r24	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7e00a8>
	servo6_us = angles_in_ms[5]*2;
 716:	8b 85       	ldd	r24, Y+11	; 0x0b
 718:	9c 85       	ldd	r25, Y+12	; 0x0c
 71a:	88 0f       	add	r24, r24
 71c:	99 1f       	adc	r25, r25
 71e:	90 93 99 00 	sts	0x0099, r25	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
 722:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
	
	delay_determine();
 726:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <delay_determine>
 }
 72a:	2c 96       	adiw	r28, 0x0c	; 12
 72c:	0f b6       	in	r0, 0x3f	; 63
 72e:	f8 94       	cli
 730:	de bf       	out	0x3e, r29	; 62
 732:	0f be       	out	0x3f, r0	; 63
 734:	cd bf       	out	0x3d, r28	; 61
 736:	df 91       	pop	r29
 738:	cf 91       	pop	r28
 73a:	08 95       	ret

0000073c <__vector_16>:
		servo_delay.mid_delay_motor = MOTOR2;
		servo_delay.min_delay_motor = MOTOR1;
	}	
}

ISR(TIMER0_OVF_vect){
 73c:	1f 92       	push	r1
 73e:	0f 92       	push	r0
 740:	0f b6       	in	r0, 0x3f	; 63
 742:	0f 92       	push	r0
 744:	11 24       	eor	r1, r1
 746:	4f 92       	push	r4
 748:	5f 92       	push	r5
 74a:	6f 92       	push	r6
 74c:	7f 92       	push	r7
 74e:	8f 92       	push	r8
 750:	9f 92       	push	r9
 752:	af 92       	push	r10
 754:	bf 92       	push	r11
 756:	cf 92       	push	r12
 758:	df 92       	push	r13
 75a:	ef 92       	push	r14
 75c:	ff 92       	push	r15
 75e:	1f 93       	push	r17
 760:	2f 93       	push	r18
 762:	3f 93       	push	r19
 764:	4f 93       	push	r20
 766:	5f 93       	push	r21
 768:	6f 93       	push	r22
 76a:	7f 93       	push	r23
 76c:	8f 93       	push	r24
 76e:	9f 93       	push	r25
 770:	af 93       	push	r26
 772:	bf 93       	push	r27
 774:	cf 93       	push	r28
 776:	df 93       	push	r29
 778:	ef 93       	push	r30
 77a:	ff 93       	push	r31
	sei();
 77c:	78 94       	sei
	PORT_MOTOR |= (1<<MOTOR1) | (1<<MOTOR2) | (1<<MOTOR4);
 77e:	8b b1       	in	r24, 0x0b	; 11
 780:	88 66       	ori	r24, 0x68	; 104
 782:	8b b9       	out	0x0b, r24	; 11
	_delay_us(servo_delay.min_delay);
 784:	c0 90 1d 01 	lds	r12, 0x011D	; 0x80011d <servo_delay>
 788:	d0 90 1e 01 	lds	r13, 0x011E	; 0x80011e <servo_delay+0x1>
 78c:	e0 90 1f 01 	lds	r14, 0x011F	; 0x80011f <servo_delay+0x2>
 790:	f0 90 20 01 	lds	r15, 0x0120	; 0x800120 <servo_delay+0x3>
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
 794:	2b ea       	ldi	r18, 0xAB	; 171
 796:	3a ea       	ldi	r19, 0xAA	; 170
 798:	4a ea       	ldi	r20, 0xAA	; 170
 79a:	50 e4       	ldi	r21, 0x40	; 64
 79c:	c7 01       	movw	r24, r14
 79e:	b6 01       	movw	r22, r12
 7a0:	0e 94 88 07 	call	0xf10	; 0xf10 <__mulsf3>
 7a4:	4b 01       	movw	r8, r22
 7a6:	5c 01       	movw	r10, r24
	__tmp2 = ((F_CPU) / 4e6) * __us;
	if (__tmp < 1.0)
 7a8:	20 e0       	ldi	r18, 0x00	; 0
 7aa:	30 e0       	ldi	r19, 0x00	; 0
 7ac:	40 e8       	ldi	r20, 0x80	; 128
 7ae:	5f e3       	ldi	r21, 0x3F	; 63
 7b0:	0e 94 2b 06 	call	0xc56	; 0xc56 <__cmpsf2>
 7b4:	88 23       	and	r24, r24
 7b6:	0c f4       	brge	.+2      	; 0x7ba <__vector_16+0x7e>
 7b8:	70 c0       	rjmp	.+224    	; 0x89a <__vector_16+0x15e>

#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
	__tmp2 = ((F_CPU) / 4e6) * __us;
 7ba:	20 e0       	ldi	r18, 0x00	; 0
 7bc:	30 e0       	ldi	r19, 0x00	; 0
 7be:	40 e8       	ldi	r20, 0x80	; 128
 7c0:	50 e4       	ldi	r21, 0x40	; 64
 7c2:	c7 01       	movw	r24, r14
 7c4:	b6 01       	movw	r22, r12
 7c6:	0e 94 88 07 	call	0xf10	; 0xf10 <__mulsf3>
 7ca:	2b 01       	movw	r4, r22
 7cc:	3c 01       	movw	r6, r24
	if (__tmp < 1.0)
		__ticks = 1;
	else if (__tmp2 > 65535)
 7ce:	20 e0       	ldi	r18, 0x00	; 0
 7d0:	3f ef       	ldi	r19, 0xFF	; 255
 7d2:	4f e7       	ldi	r20, 0x7F	; 127
 7d4:	57 e4       	ldi	r21, 0x47	; 71
 7d6:	0e 94 83 07 	call	0xf06	; 0xf06 <__gesf2>
 7da:	18 16       	cp	r1, r24
 7dc:	0c f0       	brlt	.+2      	; 0x7e0 <__vector_16+0xa4>
 7de:	45 c0       	rjmp	.+138    	; 0x86a <__vector_16+0x12e>
	{
		_delay_ms(__us / 1000.0);
 7e0:	20 e0       	ldi	r18, 0x00	; 0
 7e2:	30 e0       	ldi	r19, 0x00	; 0
 7e4:	4a e7       	ldi	r20, 0x7A	; 122
 7e6:	54 e4       	ldi	r21, 0x44	; 68
 7e8:	c7 01       	movw	r24, r14
 7ea:	b6 01       	movw	r22, r12
 7ec:	0e 94 30 06 	call	0xc60	; 0xc60 <__divsf3>
 7f0:	4b 01       	movw	r8, r22
 7f2:	5c 01       	movw	r10, r24

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 7f4:	20 e0       	ldi	r18, 0x00	; 0
 7f6:	30 e0       	ldi	r19, 0x00	; 0
 7f8:	4a e7       	ldi	r20, 0x7A	; 122
 7fa:	55 e4       	ldi	r21, 0x45	; 69
 7fc:	0e 94 88 07 	call	0xf10	; 0xf10 <__mulsf3>
 800:	6b 01       	movw	r12, r22
 802:	7c 01       	movw	r14, r24
	if (__tmp < 1.0)
 804:	20 e0       	ldi	r18, 0x00	; 0
 806:	30 e0       	ldi	r19, 0x00	; 0
 808:	40 e8       	ldi	r20, 0x80	; 128
 80a:	5f e3       	ldi	r21, 0x3F	; 63
 80c:	0e 94 2b 06 	call	0xc56	; 0xc56 <__cmpsf2>
 810:	88 23       	and	r24, r24
 812:	2c f1       	brlt	.+74     	; 0x85e <__vector_16+0x122>
		__ticks = 1;
	else if (__tmp > 65535)
 814:	20 e0       	ldi	r18, 0x00	; 0
 816:	3f ef       	ldi	r19, 0xFF	; 255
 818:	4f e7       	ldi	r20, 0x7F	; 127
 81a:	57 e4       	ldi	r21, 0x47	; 71
 81c:	c7 01       	movw	r24, r14
 81e:	b6 01       	movw	r22, r12
 820:	0e 94 83 07 	call	0xf06	; 0xf06 <__gesf2>
 824:	18 16       	cp	r1, r24
 826:	b4 f4       	brge	.+44     	; 0x854 <__vector_16+0x118>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 828:	20 e0       	ldi	r18, 0x00	; 0
 82a:	30 e0       	ldi	r19, 0x00	; 0
 82c:	40 e2       	ldi	r20, 0x20	; 32
 82e:	51 e4       	ldi	r21, 0x41	; 65
 830:	c5 01       	movw	r24, r10
 832:	b4 01       	movw	r22, r8
 834:	0e 94 88 07 	call	0xf10	; 0xf10 <__mulsf3>
 838:	0e 94 a2 06 	call	0xd44	; 0xd44 <__fixunssfsi>
		while(__ticks)
 83c:	61 15       	cp	r22, r1
 83e:	71 05       	cpc	r23, r1
 840:	69 f1       	breq	.+90     	; 0x89c <__vector_16+0x160>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 842:	20 e9       	ldi	r18, 0x90	; 144
 844:	31 e0       	ldi	r19, 0x01	; 1
 846:	c9 01       	movw	r24, r18
 848:	01 97       	sbiw	r24, 0x01	; 1
 84a:	f1 f7       	brne	.-4      	; 0x848 <__vector_16+0x10c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 84c:	61 50       	subi	r22, 0x01	; 1
 84e:	71 09       	sbc	r23, r1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 850:	d1 f7       	brne	.-12     	; 0x846 <__vector_16+0x10a>
 852:	24 c0       	rjmp	.+72     	; 0x89c <__vector_16+0x160>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 854:	c7 01       	movw	r24, r14
 856:	b6 01       	movw	r22, r12
 858:	0e 94 a2 06 	call	0xd44	; 0xd44 <__fixunssfsi>
 85c:	02 c0       	rjmp	.+4      	; 0x862 <__vector_16+0x126>

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
 85e:	61 e0       	ldi	r22, 0x01	; 1
 860:	70 e0       	ldi	r23, 0x00	; 0
 862:	cb 01       	movw	r24, r22
 864:	01 97       	sbiw	r24, 0x01	; 1
 866:	f1 f7       	brne	.-4      	; 0x864 <__vector_16+0x128>
 868:	19 c0       	rjmp	.+50     	; 0x89c <__vector_16+0x160>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
 86a:	20 e0       	ldi	r18, 0x00	; 0
 86c:	30 e0       	ldi	r19, 0x00	; 0
 86e:	4f e7       	ldi	r20, 0x7F	; 127
 870:	53 e4       	ldi	r21, 0x43	; 67
 872:	c5 01       	movw	r24, r10
 874:	b4 01       	movw	r22, r8
 876:	0e 94 83 07 	call	0xf06	; 0xf06 <__gesf2>
 87a:	18 16       	cp	r1, r24
 87c:	44 f4       	brge	.+16     	; 0x88e <__vector_16+0x152>
 87e:	c3 01       	movw	r24, r6
 880:	b2 01       	movw	r22, r4
 882:	0e 94 a2 06 	call	0xd44	; 0xd44 <__fixunssfsi>
 886:	cb 01       	movw	r24, r22
 888:	01 97       	sbiw	r24, 0x01	; 1
 88a:	f1 f7       	brne	.-4      	; 0x888 <__vector_16+0x14c>
 88c:	0a c0       	rjmp	.+20     	; 0x8a2 <__vector_16+0x166>
		uint16_t __ticks=(uint16_t)__tmp2;
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
 88e:	c5 01       	movw	r24, r10
 890:	b4 01       	movw	r22, r8
 892:	0e 94 a2 06 	call	0xd44	; 0xd44 <__fixunssfsi>
 896:	16 2f       	mov	r17, r22
 898:	01 c0       	rjmp	.+2      	; 0x89c <__vector_16+0x160>
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
	__tmp2 = ((F_CPU) / 4e6) * __us;
	if (__tmp < 1.0)
		__ticks = 1;
 89a:	11 e0       	ldi	r17, 0x01	; 1
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 89c:	61 2f       	mov	r22, r17
 89e:	6a 95       	dec	r22
 8a0:	f1 f7       	brne	.-4      	; 0x89e <__vector_16+0x162>
	PORT_MOTOR &= ~(1<<servo_delay.min_delay_motor);
 8a2:	ed e1       	ldi	r30, 0x1D	; 29
 8a4:	f1 e0       	ldi	r31, 0x01	; 1
 8a6:	34 85       	ldd	r19, Z+12	; 0x0c
 8a8:	2b b1       	in	r18, 0x0b	; 11
 8aa:	81 e0       	ldi	r24, 0x01	; 1
 8ac:	90 e0       	ldi	r25, 0x00	; 0
 8ae:	02 c0       	rjmp	.+4      	; 0x8b4 <__vector_16+0x178>
 8b0:	88 0f       	add	r24, r24
 8b2:	99 1f       	adc	r25, r25
 8b4:	3a 95       	dec	r19
 8b6:	e2 f7       	brpl	.-8      	; 0x8b0 <__vector_16+0x174>
 8b8:	80 95       	com	r24
 8ba:	90 95       	com	r25
 8bc:	82 23       	and	r24, r18
 8be:	8b b9       	out	0x0b, r24	; 11
	_delay_us( servo_delay.mid_delay - servo_delay.min_delay );
 8c0:	64 81       	ldd	r22, Z+4	; 0x04
 8c2:	75 81       	ldd	r23, Z+5	; 0x05
 8c4:	86 81       	ldd	r24, Z+6	; 0x06
 8c6:	97 81       	ldd	r25, Z+7	; 0x07
 8c8:	20 81       	ld	r18, Z
 8ca:	31 81       	ldd	r19, Z+1	; 0x01
 8cc:	42 81       	ldd	r20, Z+2	; 0x02
 8ce:	53 81       	ldd	r21, Z+3	; 0x03
 8d0:	0e 94 be 05 	call	0xb7c	; 0xb7c <__subsf3>
 8d4:	6b 01       	movw	r12, r22
 8d6:	7c 01       	movw	r14, r24
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
 8d8:	2b ea       	ldi	r18, 0xAB	; 171
 8da:	3a ea       	ldi	r19, 0xAA	; 170
 8dc:	4a ea       	ldi	r20, 0xAA	; 170
 8de:	50 e4       	ldi	r21, 0x40	; 64
 8e0:	0e 94 88 07 	call	0xf10	; 0xf10 <__mulsf3>
 8e4:	4b 01       	movw	r8, r22
 8e6:	5c 01       	movw	r10, r24
	__tmp2 = ((F_CPU) / 4e6) * __us;
	if (__tmp < 1.0)
 8e8:	20 e0       	ldi	r18, 0x00	; 0
 8ea:	30 e0       	ldi	r19, 0x00	; 0
 8ec:	40 e8       	ldi	r20, 0x80	; 128
 8ee:	5f e3       	ldi	r21, 0x3F	; 63
 8f0:	0e 94 2b 06 	call	0xc56	; 0xc56 <__cmpsf2>
 8f4:	88 23       	and	r24, r24
 8f6:	0c f4       	brge	.+2      	; 0x8fa <__vector_16+0x1be>
 8f8:	70 c0       	rjmp	.+224    	; 0x9da <__stack+0xdb>

#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
	__tmp2 = ((F_CPU) / 4e6) * __us;
 8fa:	20 e0       	ldi	r18, 0x00	; 0
 8fc:	30 e0       	ldi	r19, 0x00	; 0
 8fe:	40 e8       	ldi	r20, 0x80	; 128
 900:	50 e4       	ldi	r21, 0x40	; 64
 902:	c7 01       	movw	r24, r14
 904:	b6 01       	movw	r22, r12
 906:	0e 94 88 07 	call	0xf10	; 0xf10 <__mulsf3>
 90a:	2b 01       	movw	r4, r22
 90c:	3c 01       	movw	r6, r24
	if (__tmp < 1.0)
		__ticks = 1;
	else if (__tmp2 > 65535)
 90e:	20 e0       	ldi	r18, 0x00	; 0
 910:	3f ef       	ldi	r19, 0xFF	; 255
 912:	4f e7       	ldi	r20, 0x7F	; 127
 914:	57 e4       	ldi	r21, 0x47	; 71
 916:	0e 94 83 07 	call	0xf06	; 0xf06 <__gesf2>
 91a:	18 16       	cp	r1, r24
 91c:	0c f0       	brlt	.+2      	; 0x920 <__stack+0x21>
 91e:	45 c0       	rjmp	.+138    	; 0x9aa <__stack+0xab>
	{
		_delay_ms(__us / 1000.0);
 920:	20 e0       	ldi	r18, 0x00	; 0
 922:	30 e0       	ldi	r19, 0x00	; 0
 924:	4a e7       	ldi	r20, 0x7A	; 122
 926:	54 e4       	ldi	r21, 0x44	; 68
 928:	c7 01       	movw	r24, r14
 92a:	b6 01       	movw	r22, r12
 92c:	0e 94 30 06 	call	0xc60	; 0xc60 <__divsf3>
 930:	4b 01       	movw	r8, r22
 932:	5c 01       	movw	r10, r24

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 934:	20 e0       	ldi	r18, 0x00	; 0
 936:	30 e0       	ldi	r19, 0x00	; 0
 938:	4a e7       	ldi	r20, 0x7A	; 122
 93a:	55 e4       	ldi	r21, 0x45	; 69
 93c:	0e 94 88 07 	call	0xf10	; 0xf10 <__mulsf3>
 940:	6b 01       	movw	r12, r22
 942:	7c 01       	movw	r14, r24
	if (__tmp < 1.0)
 944:	20 e0       	ldi	r18, 0x00	; 0
 946:	30 e0       	ldi	r19, 0x00	; 0
 948:	40 e8       	ldi	r20, 0x80	; 128
 94a:	5f e3       	ldi	r21, 0x3F	; 63
 94c:	0e 94 2b 06 	call	0xc56	; 0xc56 <__cmpsf2>
 950:	88 23       	and	r24, r24
 952:	2c f1       	brlt	.+74     	; 0x99e <__stack+0x9f>
		__ticks = 1;
	else if (__tmp > 65535)
 954:	20 e0       	ldi	r18, 0x00	; 0
 956:	3f ef       	ldi	r19, 0xFF	; 255
 958:	4f e7       	ldi	r20, 0x7F	; 127
 95a:	57 e4       	ldi	r21, 0x47	; 71
 95c:	c7 01       	movw	r24, r14
 95e:	b6 01       	movw	r22, r12
 960:	0e 94 83 07 	call	0xf06	; 0xf06 <__gesf2>
 964:	18 16       	cp	r1, r24
 966:	b4 f4       	brge	.+44     	; 0x994 <__stack+0x95>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 968:	20 e0       	ldi	r18, 0x00	; 0
 96a:	30 e0       	ldi	r19, 0x00	; 0
 96c:	40 e2       	ldi	r20, 0x20	; 32
 96e:	51 e4       	ldi	r21, 0x41	; 65
 970:	c5 01       	movw	r24, r10
 972:	b4 01       	movw	r22, r8
 974:	0e 94 88 07 	call	0xf10	; 0xf10 <__mulsf3>
 978:	0e 94 a2 06 	call	0xd44	; 0xd44 <__fixunssfsi>
		while(__ticks)
 97c:	61 15       	cp	r22, r1
 97e:	71 05       	cpc	r23, r1
 980:	69 f1       	breq	.+90     	; 0x9dc <__stack+0xdd>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 982:	20 e9       	ldi	r18, 0x90	; 144
 984:	31 e0       	ldi	r19, 0x01	; 1
 986:	c9 01       	movw	r24, r18
 988:	01 97       	sbiw	r24, 0x01	; 1
 98a:	f1 f7       	brne	.-4      	; 0x988 <__stack+0x89>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 98c:	61 50       	subi	r22, 0x01	; 1
 98e:	71 09       	sbc	r23, r1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 990:	d1 f7       	brne	.-12     	; 0x986 <__stack+0x87>
 992:	24 c0       	rjmp	.+72     	; 0x9dc <__stack+0xdd>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 994:	c7 01       	movw	r24, r14
 996:	b6 01       	movw	r22, r12
 998:	0e 94 a2 06 	call	0xd44	; 0xd44 <__fixunssfsi>
 99c:	02 c0       	rjmp	.+4      	; 0x9a2 <__stack+0xa3>

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
 99e:	61 e0       	ldi	r22, 0x01	; 1
 9a0:	70 e0       	ldi	r23, 0x00	; 0
 9a2:	cb 01       	movw	r24, r22
 9a4:	01 97       	sbiw	r24, 0x01	; 1
 9a6:	f1 f7       	brne	.-4      	; 0x9a4 <__stack+0xa5>
 9a8:	19 c0       	rjmp	.+50     	; 0x9dc <__stack+0xdd>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
 9aa:	20 e0       	ldi	r18, 0x00	; 0
 9ac:	30 e0       	ldi	r19, 0x00	; 0
 9ae:	4f e7       	ldi	r20, 0x7F	; 127
 9b0:	53 e4       	ldi	r21, 0x43	; 67
 9b2:	c5 01       	movw	r24, r10
 9b4:	b4 01       	movw	r22, r8
 9b6:	0e 94 83 07 	call	0xf06	; 0xf06 <__gesf2>
 9ba:	18 16       	cp	r1, r24
 9bc:	44 f4       	brge	.+16     	; 0x9ce <__stack+0xcf>
 9be:	c3 01       	movw	r24, r6
 9c0:	b2 01       	movw	r22, r4
 9c2:	0e 94 a2 06 	call	0xd44	; 0xd44 <__fixunssfsi>
 9c6:	cb 01       	movw	r24, r22
 9c8:	01 97       	sbiw	r24, 0x01	; 1
 9ca:	f1 f7       	brne	.-4      	; 0x9c8 <__stack+0xc9>
 9cc:	09 c0       	rjmp	.+18     	; 0x9e0 <__stack+0xe1>
		uint16_t __ticks=(uint16_t)__tmp2;
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
 9ce:	c5 01       	movw	r24, r10
 9d0:	b4 01       	movw	r22, r8
 9d2:	0e 94 a2 06 	call	0xd44	; 0xd44 <__fixunssfsi>
 9d6:	d6 2f       	mov	r29, r22
 9d8:	01 c0       	rjmp	.+2      	; 0x9dc <__stack+0xdd>
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
	__tmp2 = ((F_CPU) / 4e6) * __us;
	if (__tmp < 1.0)
		__ticks = 1;
 9da:	d1 e0       	ldi	r29, 0x01	; 1
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 9dc:	da 95       	dec	r29
 9de:	f1 f7       	brne	.-4      	; 0x9dc <__stack+0xdd>
	PORT_MOTOR &= ~(1<<servo_delay.mid_delay_motor);
 9e0:	ed e1       	ldi	r30, 0x1D	; 29
 9e2:	f1 e0       	ldi	r31, 0x01	; 1
 9e4:	35 85       	ldd	r19, Z+13	; 0x0d
 9e6:	2b b1       	in	r18, 0x0b	; 11
 9e8:	81 e0       	ldi	r24, 0x01	; 1
 9ea:	90 e0       	ldi	r25, 0x00	; 0
 9ec:	02 c0       	rjmp	.+4      	; 0x9f2 <__stack+0xf3>
 9ee:	88 0f       	add	r24, r24
 9f0:	99 1f       	adc	r25, r25
 9f2:	3a 95       	dec	r19
 9f4:	e2 f7       	brpl	.-8      	; 0x9ee <__stack+0xef>
 9f6:	80 95       	com	r24
 9f8:	90 95       	com	r25
 9fa:	82 23       	and	r24, r18
 9fc:	8b b9       	out	0x0b, r24	; 11
	_delay_us( servo_delay.max_delay - servo_delay.mid_delay  );
 9fe:	60 85       	ldd	r22, Z+8	; 0x08
 a00:	71 85       	ldd	r23, Z+9	; 0x09
 a02:	82 85       	ldd	r24, Z+10	; 0x0a
 a04:	93 85       	ldd	r25, Z+11	; 0x0b
 a06:	24 81       	ldd	r18, Z+4	; 0x04
 a08:	35 81       	ldd	r19, Z+5	; 0x05
 a0a:	46 81       	ldd	r20, Z+6	; 0x06
 a0c:	57 81       	ldd	r21, Z+7	; 0x07
 a0e:	0e 94 be 05 	call	0xb7c	; 0xb7c <__subsf3>
 a12:	6b 01       	movw	r12, r22
 a14:	7c 01       	movw	r14, r24
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
 a16:	2b ea       	ldi	r18, 0xAB	; 171
 a18:	3a ea       	ldi	r19, 0xAA	; 170
 a1a:	4a ea       	ldi	r20, 0xAA	; 170
 a1c:	50 e4       	ldi	r21, 0x40	; 64
 a1e:	0e 94 88 07 	call	0xf10	; 0xf10 <__mulsf3>
 a22:	4b 01       	movw	r8, r22
 a24:	5c 01       	movw	r10, r24
	__tmp2 = ((F_CPU) / 4e6) * __us;
	if (__tmp < 1.0)
 a26:	20 e0       	ldi	r18, 0x00	; 0
 a28:	30 e0       	ldi	r19, 0x00	; 0
 a2a:	40 e8       	ldi	r20, 0x80	; 128
 a2c:	5f e3       	ldi	r21, 0x3F	; 63
 a2e:	0e 94 2b 06 	call	0xc56	; 0xc56 <__cmpsf2>
 a32:	88 23       	and	r24, r24
 a34:	0c f4       	brge	.+2      	; 0xa38 <__stack+0x139>
 a36:	70 c0       	rjmp	.+224    	; 0xb18 <__stack+0x219>

#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
	__tmp2 = ((F_CPU) / 4e6) * __us;
 a38:	20 e0       	ldi	r18, 0x00	; 0
 a3a:	30 e0       	ldi	r19, 0x00	; 0
 a3c:	40 e8       	ldi	r20, 0x80	; 128
 a3e:	50 e4       	ldi	r21, 0x40	; 64
 a40:	c7 01       	movw	r24, r14
 a42:	b6 01       	movw	r22, r12
 a44:	0e 94 88 07 	call	0xf10	; 0xf10 <__mulsf3>
 a48:	2b 01       	movw	r4, r22
 a4a:	3c 01       	movw	r6, r24
	if (__tmp < 1.0)
		__ticks = 1;
	else if (__tmp2 > 65535)
 a4c:	20 e0       	ldi	r18, 0x00	; 0
 a4e:	3f ef       	ldi	r19, 0xFF	; 255
 a50:	4f e7       	ldi	r20, 0x7F	; 127
 a52:	57 e4       	ldi	r21, 0x47	; 71
 a54:	0e 94 83 07 	call	0xf06	; 0xf06 <__gesf2>
 a58:	18 16       	cp	r1, r24
 a5a:	0c f0       	brlt	.+2      	; 0xa5e <__stack+0x15f>
 a5c:	45 c0       	rjmp	.+138    	; 0xae8 <__stack+0x1e9>
	{
		_delay_ms(__us / 1000.0);
 a5e:	20 e0       	ldi	r18, 0x00	; 0
 a60:	30 e0       	ldi	r19, 0x00	; 0
 a62:	4a e7       	ldi	r20, 0x7A	; 122
 a64:	54 e4       	ldi	r21, 0x44	; 68
 a66:	c7 01       	movw	r24, r14
 a68:	b6 01       	movw	r22, r12
 a6a:	0e 94 30 06 	call	0xc60	; 0xc60 <__divsf3>
 a6e:	4b 01       	movw	r8, r22
 a70:	5c 01       	movw	r10, r24

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 a72:	20 e0       	ldi	r18, 0x00	; 0
 a74:	30 e0       	ldi	r19, 0x00	; 0
 a76:	4a e7       	ldi	r20, 0x7A	; 122
 a78:	55 e4       	ldi	r21, 0x45	; 69
 a7a:	0e 94 88 07 	call	0xf10	; 0xf10 <__mulsf3>
 a7e:	6b 01       	movw	r12, r22
 a80:	7c 01       	movw	r14, r24
	if (__tmp < 1.0)
 a82:	20 e0       	ldi	r18, 0x00	; 0
 a84:	30 e0       	ldi	r19, 0x00	; 0
 a86:	40 e8       	ldi	r20, 0x80	; 128
 a88:	5f e3       	ldi	r21, 0x3F	; 63
 a8a:	0e 94 2b 06 	call	0xc56	; 0xc56 <__cmpsf2>
 a8e:	88 23       	and	r24, r24
 a90:	2c f1       	brlt	.+74     	; 0xadc <__stack+0x1dd>
		__ticks = 1;
	else if (__tmp > 65535)
 a92:	20 e0       	ldi	r18, 0x00	; 0
 a94:	3f ef       	ldi	r19, 0xFF	; 255
 a96:	4f e7       	ldi	r20, 0x7F	; 127
 a98:	57 e4       	ldi	r21, 0x47	; 71
 a9a:	c7 01       	movw	r24, r14
 a9c:	b6 01       	movw	r22, r12
 a9e:	0e 94 83 07 	call	0xf06	; 0xf06 <__gesf2>
 aa2:	18 16       	cp	r1, r24
 aa4:	b4 f4       	brge	.+44     	; 0xad2 <__stack+0x1d3>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 aa6:	20 e0       	ldi	r18, 0x00	; 0
 aa8:	30 e0       	ldi	r19, 0x00	; 0
 aaa:	40 e2       	ldi	r20, 0x20	; 32
 aac:	51 e4       	ldi	r21, 0x41	; 65
 aae:	c5 01       	movw	r24, r10
 ab0:	b4 01       	movw	r22, r8
 ab2:	0e 94 88 07 	call	0xf10	; 0xf10 <__mulsf3>
 ab6:	0e 94 a2 06 	call	0xd44	; 0xd44 <__fixunssfsi>
		while(__ticks)
 aba:	61 15       	cp	r22, r1
 abc:	71 05       	cpc	r23, r1
 abe:	69 f1       	breq	.+90     	; 0xb1a <__stack+0x21b>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 ac0:	20 e9       	ldi	r18, 0x90	; 144
 ac2:	31 e0       	ldi	r19, 0x01	; 1
 ac4:	c9 01       	movw	r24, r18
 ac6:	01 97       	sbiw	r24, 0x01	; 1
 ac8:	f1 f7       	brne	.-4      	; 0xac6 <__stack+0x1c7>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 aca:	61 50       	subi	r22, 0x01	; 1
 acc:	71 09       	sbc	r23, r1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 ace:	d1 f7       	brne	.-12     	; 0xac4 <__stack+0x1c5>
 ad0:	24 c0       	rjmp	.+72     	; 0xb1a <__stack+0x21b>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 ad2:	c7 01       	movw	r24, r14
 ad4:	b6 01       	movw	r22, r12
 ad6:	0e 94 a2 06 	call	0xd44	; 0xd44 <__fixunssfsi>
 ada:	02 c0       	rjmp	.+4      	; 0xae0 <__stack+0x1e1>

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
 adc:	61 e0       	ldi	r22, 0x01	; 1
 ade:	70 e0       	ldi	r23, 0x00	; 0
 ae0:	cb 01       	movw	r24, r22
 ae2:	01 97       	sbiw	r24, 0x01	; 1
 ae4:	f1 f7       	brne	.-4      	; 0xae2 <__stack+0x1e3>
 ae6:	19 c0       	rjmp	.+50     	; 0xb1a <__stack+0x21b>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
 ae8:	20 e0       	ldi	r18, 0x00	; 0
 aea:	30 e0       	ldi	r19, 0x00	; 0
 aec:	4f e7       	ldi	r20, 0x7F	; 127
 aee:	53 e4       	ldi	r21, 0x43	; 67
 af0:	c5 01       	movw	r24, r10
 af2:	b4 01       	movw	r22, r8
 af4:	0e 94 83 07 	call	0xf06	; 0xf06 <__gesf2>
 af8:	18 16       	cp	r1, r24
 afa:	44 f4       	brge	.+16     	; 0xb0c <__stack+0x20d>
 afc:	c3 01       	movw	r24, r6
 afe:	b2 01       	movw	r22, r4
 b00:	0e 94 a2 06 	call	0xd44	; 0xd44 <__fixunssfsi>
 b04:	cb 01       	movw	r24, r22
 b06:	01 97       	sbiw	r24, 0x01	; 1
 b08:	f1 f7       	brne	.-4      	; 0xb06 <__stack+0x207>
 b0a:	09 c0       	rjmp	.+18     	; 0xb1e <__stack+0x21f>
		uint16_t __ticks=(uint16_t)__tmp2;
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
 b0c:	c5 01       	movw	r24, r10
 b0e:	b4 01       	movw	r22, r8
 b10:	0e 94 a2 06 	call	0xd44	; 0xd44 <__fixunssfsi>
 b14:	c6 2f       	mov	r28, r22
 b16:	01 c0       	rjmp	.+2      	; 0xb1a <__stack+0x21b>
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
	__tmp2 = ((F_CPU) / 4e6) * __us;
	if (__tmp < 1.0)
		__ticks = 1;
 b18:	c1 e0       	ldi	r28, 0x01	; 1
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 b1a:	ca 95       	dec	r28
 b1c:	f1 f7       	brne	.-4      	; 0xb1a <__stack+0x21b>
	PORT_MOTOR &= ~(1<<servo_delay.max_delay_motor);	
 b1e:	30 91 2b 01 	lds	r19, 0x012B	; 0x80012b <servo_delay+0xe>
 b22:	2b b1       	in	r18, 0x0b	; 11
 b24:	81 e0       	ldi	r24, 0x01	; 1
 b26:	90 e0       	ldi	r25, 0x00	; 0
 b28:	02 c0       	rjmp	.+4      	; 0xb2e <__stack+0x22f>
 b2a:	88 0f       	add	r24, r24
 b2c:	99 1f       	adc	r25, r25
 b2e:	3a 95       	dec	r19
 b30:	e2 f7       	brpl	.-8      	; 0xb2a <__stack+0x22b>
 b32:	80 95       	com	r24
 b34:	90 95       	com	r25
 b36:	82 23       	and	r24, r18
 b38:	8b b9       	out	0x0b, r24	; 11
	TCNT0 = 0x00;
 b3a:	16 bc       	out	0x26, r1	; 38
}
 b3c:	ff 91       	pop	r31
 b3e:	ef 91       	pop	r30
 b40:	df 91       	pop	r29
 b42:	cf 91       	pop	r28
 b44:	bf 91       	pop	r27
 b46:	af 91       	pop	r26
 b48:	9f 91       	pop	r25
 b4a:	8f 91       	pop	r24
 b4c:	7f 91       	pop	r23
 b4e:	6f 91       	pop	r22
 b50:	5f 91       	pop	r21
 b52:	4f 91       	pop	r20
 b54:	3f 91       	pop	r19
 b56:	2f 91       	pop	r18
 b58:	1f 91       	pop	r17
 b5a:	ff 90       	pop	r15
 b5c:	ef 90       	pop	r14
 b5e:	df 90       	pop	r13
 b60:	cf 90       	pop	r12
 b62:	bf 90       	pop	r11
 b64:	af 90       	pop	r10
 b66:	9f 90       	pop	r9
 b68:	8f 90       	pop	r8
 b6a:	7f 90       	pop	r7
 b6c:	6f 90       	pop	r6
 b6e:	5f 90       	pop	r5
 b70:	4f 90       	pop	r4
 b72:	0f 90       	pop	r0
 b74:	0f be       	out	0x3f, r0	; 63
 b76:	0f 90       	pop	r0
 b78:	1f 90       	pop	r1
 b7a:	18 95       	reti

00000b7c <__subsf3>:
 b7c:	50 58       	subi	r21, 0x80	; 128

00000b7e <__addsf3>:
 b7e:	bb 27       	eor	r27, r27
 b80:	aa 27       	eor	r26, r26
 b82:	0e 94 d6 05 	call	0xbac	; 0xbac <__addsf3x>
 b86:	0c 94 49 07 	jmp	0xe92	; 0xe92 <__fp_round>
 b8a:	0e 94 3b 07 	call	0xe76	; 0xe76 <__fp_pscA>
 b8e:	38 f0       	brcs	.+14     	; 0xb9e <__addsf3+0x20>
 b90:	0e 94 42 07 	call	0xe84	; 0xe84 <__fp_pscB>
 b94:	20 f0       	brcs	.+8      	; 0xb9e <__addsf3+0x20>
 b96:	39 f4       	brne	.+14     	; 0xba6 <__addsf3+0x28>
 b98:	9f 3f       	cpi	r25, 0xFF	; 255
 b9a:	19 f4       	brne	.+6      	; 0xba2 <__addsf3+0x24>
 b9c:	26 f4       	brtc	.+8      	; 0xba6 <__addsf3+0x28>
 b9e:	0c 94 38 07 	jmp	0xe70	; 0xe70 <__fp_nan>
 ba2:	0e f4       	brtc	.+2      	; 0xba6 <__addsf3+0x28>
 ba4:	e0 95       	com	r30
 ba6:	e7 fb       	bst	r30, 7
 ba8:	0c 94 32 07 	jmp	0xe64	; 0xe64 <__fp_inf>

00000bac <__addsf3x>:
 bac:	e9 2f       	mov	r30, r25
 bae:	0e 94 5a 07 	call	0xeb4	; 0xeb4 <__fp_split3>
 bb2:	58 f3       	brcs	.-42     	; 0xb8a <__addsf3+0xc>
 bb4:	ba 17       	cp	r27, r26
 bb6:	62 07       	cpc	r22, r18
 bb8:	73 07       	cpc	r23, r19
 bba:	84 07       	cpc	r24, r20
 bbc:	95 07       	cpc	r25, r21
 bbe:	20 f0       	brcs	.+8      	; 0xbc8 <__addsf3x+0x1c>
 bc0:	79 f4       	brne	.+30     	; 0xbe0 <__addsf3x+0x34>
 bc2:	a6 f5       	brtc	.+104    	; 0xc2c <__addsf3x+0x80>
 bc4:	0c 94 7c 07 	jmp	0xef8	; 0xef8 <__fp_zero>
 bc8:	0e f4       	brtc	.+2      	; 0xbcc <__addsf3x+0x20>
 bca:	e0 95       	com	r30
 bcc:	0b 2e       	mov	r0, r27
 bce:	ba 2f       	mov	r27, r26
 bd0:	a0 2d       	mov	r26, r0
 bd2:	0b 01       	movw	r0, r22
 bd4:	b9 01       	movw	r22, r18
 bd6:	90 01       	movw	r18, r0
 bd8:	0c 01       	movw	r0, r24
 bda:	ca 01       	movw	r24, r20
 bdc:	a0 01       	movw	r20, r0
 bde:	11 24       	eor	r1, r1
 be0:	ff 27       	eor	r31, r31
 be2:	59 1b       	sub	r21, r25
 be4:	99 f0       	breq	.+38     	; 0xc0c <__addsf3x+0x60>
 be6:	59 3f       	cpi	r21, 0xF9	; 249
 be8:	50 f4       	brcc	.+20     	; 0xbfe <__addsf3x+0x52>
 bea:	50 3e       	cpi	r21, 0xE0	; 224
 bec:	68 f1       	brcs	.+90     	; 0xc48 <__addsf3x+0x9c>
 bee:	1a 16       	cp	r1, r26
 bf0:	f0 40       	sbci	r31, 0x00	; 0
 bf2:	a2 2f       	mov	r26, r18
 bf4:	23 2f       	mov	r18, r19
 bf6:	34 2f       	mov	r19, r20
 bf8:	44 27       	eor	r20, r20
 bfa:	58 5f       	subi	r21, 0xF8	; 248
 bfc:	f3 cf       	rjmp	.-26     	; 0xbe4 <__addsf3x+0x38>
 bfe:	46 95       	lsr	r20
 c00:	37 95       	ror	r19
 c02:	27 95       	ror	r18
 c04:	a7 95       	ror	r26
 c06:	f0 40       	sbci	r31, 0x00	; 0
 c08:	53 95       	inc	r21
 c0a:	c9 f7       	brne	.-14     	; 0xbfe <__addsf3x+0x52>
 c0c:	7e f4       	brtc	.+30     	; 0xc2c <__addsf3x+0x80>
 c0e:	1f 16       	cp	r1, r31
 c10:	ba 0b       	sbc	r27, r26
 c12:	62 0b       	sbc	r22, r18
 c14:	73 0b       	sbc	r23, r19
 c16:	84 0b       	sbc	r24, r20
 c18:	ba f0       	brmi	.+46     	; 0xc48 <__addsf3x+0x9c>
 c1a:	91 50       	subi	r25, 0x01	; 1
 c1c:	a1 f0       	breq	.+40     	; 0xc46 <__addsf3x+0x9a>
 c1e:	ff 0f       	add	r31, r31
 c20:	bb 1f       	adc	r27, r27
 c22:	66 1f       	adc	r22, r22
 c24:	77 1f       	adc	r23, r23
 c26:	88 1f       	adc	r24, r24
 c28:	c2 f7       	brpl	.-16     	; 0xc1a <__addsf3x+0x6e>
 c2a:	0e c0       	rjmp	.+28     	; 0xc48 <__addsf3x+0x9c>
 c2c:	ba 0f       	add	r27, r26
 c2e:	62 1f       	adc	r22, r18
 c30:	73 1f       	adc	r23, r19
 c32:	84 1f       	adc	r24, r20
 c34:	48 f4       	brcc	.+18     	; 0xc48 <__addsf3x+0x9c>
 c36:	87 95       	ror	r24
 c38:	77 95       	ror	r23
 c3a:	67 95       	ror	r22
 c3c:	b7 95       	ror	r27
 c3e:	f7 95       	ror	r31
 c40:	9e 3f       	cpi	r25, 0xFE	; 254
 c42:	08 f0       	brcs	.+2      	; 0xc46 <__addsf3x+0x9a>
 c44:	b0 cf       	rjmp	.-160    	; 0xba6 <__addsf3+0x28>
 c46:	93 95       	inc	r25
 c48:	88 0f       	add	r24, r24
 c4a:	08 f0       	brcs	.+2      	; 0xc4e <__addsf3x+0xa2>
 c4c:	99 27       	eor	r25, r25
 c4e:	ee 0f       	add	r30, r30
 c50:	97 95       	ror	r25
 c52:	87 95       	ror	r24
 c54:	08 95       	ret

00000c56 <__cmpsf2>:
 c56:	0e 94 0e 07 	call	0xe1c	; 0xe1c <__fp_cmp>
 c5a:	08 f4       	brcc	.+2      	; 0xc5e <__cmpsf2+0x8>
 c5c:	81 e0       	ldi	r24, 0x01	; 1
 c5e:	08 95       	ret

00000c60 <__divsf3>:
 c60:	0e 94 44 06 	call	0xc88	; 0xc88 <__divsf3x>
 c64:	0c 94 49 07 	jmp	0xe92	; 0xe92 <__fp_round>
 c68:	0e 94 42 07 	call	0xe84	; 0xe84 <__fp_pscB>
 c6c:	58 f0       	brcs	.+22     	; 0xc84 <__divsf3+0x24>
 c6e:	0e 94 3b 07 	call	0xe76	; 0xe76 <__fp_pscA>
 c72:	40 f0       	brcs	.+16     	; 0xc84 <__divsf3+0x24>
 c74:	29 f4       	brne	.+10     	; 0xc80 <__divsf3+0x20>
 c76:	5f 3f       	cpi	r21, 0xFF	; 255
 c78:	29 f0       	breq	.+10     	; 0xc84 <__divsf3+0x24>
 c7a:	0c 94 32 07 	jmp	0xe64	; 0xe64 <__fp_inf>
 c7e:	51 11       	cpse	r21, r1
 c80:	0c 94 7d 07 	jmp	0xefa	; 0xefa <__fp_szero>
 c84:	0c 94 38 07 	jmp	0xe70	; 0xe70 <__fp_nan>

00000c88 <__divsf3x>:
 c88:	0e 94 5a 07 	call	0xeb4	; 0xeb4 <__fp_split3>
 c8c:	68 f3       	brcs	.-38     	; 0xc68 <__divsf3+0x8>

00000c8e <__divsf3_pse>:
 c8e:	99 23       	and	r25, r25
 c90:	b1 f3       	breq	.-20     	; 0xc7e <__divsf3+0x1e>
 c92:	55 23       	and	r21, r21
 c94:	91 f3       	breq	.-28     	; 0xc7a <__divsf3+0x1a>
 c96:	95 1b       	sub	r25, r21
 c98:	55 0b       	sbc	r21, r21
 c9a:	bb 27       	eor	r27, r27
 c9c:	aa 27       	eor	r26, r26
 c9e:	62 17       	cp	r22, r18
 ca0:	73 07       	cpc	r23, r19
 ca2:	84 07       	cpc	r24, r20
 ca4:	38 f0       	brcs	.+14     	; 0xcb4 <__divsf3_pse+0x26>
 ca6:	9f 5f       	subi	r25, 0xFF	; 255
 ca8:	5f 4f       	sbci	r21, 0xFF	; 255
 caa:	22 0f       	add	r18, r18
 cac:	33 1f       	adc	r19, r19
 cae:	44 1f       	adc	r20, r20
 cb0:	aa 1f       	adc	r26, r26
 cb2:	a9 f3       	breq	.-22     	; 0xc9e <__divsf3_pse+0x10>
 cb4:	35 d0       	rcall	.+106    	; 0xd20 <__divsf3_pse+0x92>
 cb6:	0e 2e       	mov	r0, r30
 cb8:	3a f0       	brmi	.+14     	; 0xcc8 <__divsf3_pse+0x3a>
 cba:	e0 e8       	ldi	r30, 0x80	; 128
 cbc:	32 d0       	rcall	.+100    	; 0xd22 <__divsf3_pse+0x94>
 cbe:	91 50       	subi	r25, 0x01	; 1
 cc0:	50 40       	sbci	r21, 0x00	; 0
 cc2:	e6 95       	lsr	r30
 cc4:	00 1c       	adc	r0, r0
 cc6:	ca f7       	brpl	.-14     	; 0xcba <__divsf3_pse+0x2c>
 cc8:	2b d0       	rcall	.+86     	; 0xd20 <__divsf3_pse+0x92>
 cca:	fe 2f       	mov	r31, r30
 ccc:	29 d0       	rcall	.+82     	; 0xd20 <__divsf3_pse+0x92>
 cce:	66 0f       	add	r22, r22
 cd0:	77 1f       	adc	r23, r23
 cd2:	88 1f       	adc	r24, r24
 cd4:	bb 1f       	adc	r27, r27
 cd6:	26 17       	cp	r18, r22
 cd8:	37 07       	cpc	r19, r23
 cda:	48 07       	cpc	r20, r24
 cdc:	ab 07       	cpc	r26, r27
 cde:	b0 e8       	ldi	r27, 0x80	; 128
 ce0:	09 f0       	breq	.+2      	; 0xce4 <__divsf3_pse+0x56>
 ce2:	bb 0b       	sbc	r27, r27
 ce4:	80 2d       	mov	r24, r0
 ce6:	bf 01       	movw	r22, r30
 ce8:	ff 27       	eor	r31, r31
 cea:	93 58       	subi	r25, 0x83	; 131
 cec:	5f 4f       	sbci	r21, 0xFF	; 255
 cee:	3a f0       	brmi	.+14     	; 0xcfe <__divsf3_pse+0x70>
 cf0:	9e 3f       	cpi	r25, 0xFE	; 254
 cf2:	51 05       	cpc	r21, r1
 cf4:	78 f0       	brcs	.+30     	; 0xd14 <__divsf3_pse+0x86>
 cf6:	0c 94 32 07 	jmp	0xe64	; 0xe64 <__fp_inf>
 cfa:	0c 94 7d 07 	jmp	0xefa	; 0xefa <__fp_szero>
 cfe:	5f 3f       	cpi	r21, 0xFF	; 255
 d00:	e4 f3       	brlt	.-8      	; 0xcfa <__divsf3_pse+0x6c>
 d02:	98 3e       	cpi	r25, 0xE8	; 232
 d04:	d4 f3       	brlt	.-12     	; 0xcfa <__divsf3_pse+0x6c>
 d06:	86 95       	lsr	r24
 d08:	77 95       	ror	r23
 d0a:	67 95       	ror	r22
 d0c:	b7 95       	ror	r27
 d0e:	f7 95       	ror	r31
 d10:	9f 5f       	subi	r25, 0xFF	; 255
 d12:	c9 f7       	brne	.-14     	; 0xd06 <__divsf3_pse+0x78>
 d14:	88 0f       	add	r24, r24
 d16:	91 1d       	adc	r25, r1
 d18:	96 95       	lsr	r25
 d1a:	87 95       	ror	r24
 d1c:	97 f9       	bld	r25, 7
 d1e:	08 95       	ret
 d20:	e1 e0       	ldi	r30, 0x01	; 1
 d22:	66 0f       	add	r22, r22
 d24:	77 1f       	adc	r23, r23
 d26:	88 1f       	adc	r24, r24
 d28:	bb 1f       	adc	r27, r27
 d2a:	62 17       	cp	r22, r18
 d2c:	73 07       	cpc	r23, r19
 d2e:	84 07       	cpc	r24, r20
 d30:	ba 07       	cpc	r27, r26
 d32:	20 f0       	brcs	.+8      	; 0xd3c <__divsf3_pse+0xae>
 d34:	62 1b       	sub	r22, r18
 d36:	73 0b       	sbc	r23, r19
 d38:	84 0b       	sbc	r24, r20
 d3a:	ba 0b       	sbc	r27, r26
 d3c:	ee 1f       	adc	r30, r30
 d3e:	88 f7       	brcc	.-30     	; 0xd22 <__divsf3_pse+0x94>
 d40:	e0 95       	com	r30
 d42:	08 95       	ret

00000d44 <__fixunssfsi>:
 d44:	0e 94 62 07 	call	0xec4	; 0xec4 <__fp_splitA>
 d48:	88 f0       	brcs	.+34     	; 0xd6c <__fixunssfsi+0x28>
 d4a:	9f 57       	subi	r25, 0x7F	; 127
 d4c:	98 f0       	brcs	.+38     	; 0xd74 <__fixunssfsi+0x30>
 d4e:	b9 2f       	mov	r27, r25
 d50:	99 27       	eor	r25, r25
 d52:	b7 51       	subi	r27, 0x17	; 23
 d54:	b0 f0       	brcs	.+44     	; 0xd82 <__fixunssfsi+0x3e>
 d56:	e1 f0       	breq	.+56     	; 0xd90 <__fixunssfsi+0x4c>
 d58:	66 0f       	add	r22, r22
 d5a:	77 1f       	adc	r23, r23
 d5c:	88 1f       	adc	r24, r24
 d5e:	99 1f       	adc	r25, r25
 d60:	1a f0       	brmi	.+6      	; 0xd68 <__fixunssfsi+0x24>
 d62:	ba 95       	dec	r27
 d64:	c9 f7       	brne	.-14     	; 0xd58 <__fixunssfsi+0x14>
 d66:	14 c0       	rjmp	.+40     	; 0xd90 <__fixunssfsi+0x4c>
 d68:	b1 30       	cpi	r27, 0x01	; 1
 d6a:	91 f0       	breq	.+36     	; 0xd90 <__fixunssfsi+0x4c>
 d6c:	0e 94 7c 07 	call	0xef8	; 0xef8 <__fp_zero>
 d70:	b1 e0       	ldi	r27, 0x01	; 1
 d72:	08 95       	ret
 d74:	0c 94 7c 07 	jmp	0xef8	; 0xef8 <__fp_zero>
 d78:	67 2f       	mov	r22, r23
 d7a:	78 2f       	mov	r23, r24
 d7c:	88 27       	eor	r24, r24
 d7e:	b8 5f       	subi	r27, 0xF8	; 248
 d80:	39 f0       	breq	.+14     	; 0xd90 <__fixunssfsi+0x4c>
 d82:	b9 3f       	cpi	r27, 0xF9	; 249
 d84:	cc f3       	brlt	.-14     	; 0xd78 <__fixunssfsi+0x34>
 d86:	86 95       	lsr	r24
 d88:	77 95       	ror	r23
 d8a:	67 95       	ror	r22
 d8c:	b3 95       	inc	r27
 d8e:	d9 f7       	brne	.-10     	; 0xd86 <__fixunssfsi+0x42>
 d90:	3e f4       	brtc	.+14     	; 0xda0 <__fixunssfsi+0x5c>
 d92:	90 95       	com	r25
 d94:	80 95       	com	r24
 d96:	70 95       	com	r23
 d98:	61 95       	neg	r22
 d9a:	7f 4f       	sbci	r23, 0xFF	; 255
 d9c:	8f 4f       	sbci	r24, 0xFF	; 255
 d9e:	9f 4f       	sbci	r25, 0xFF	; 255
 da0:	08 95       	ret

00000da2 <__floatunsisf>:
 da2:	e8 94       	clt
 da4:	09 c0       	rjmp	.+18     	; 0xdb8 <__floatsisf+0x12>

00000da6 <__floatsisf>:
 da6:	97 fb       	bst	r25, 7
 da8:	3e f4       	brtc	.+14     	; 0xdb8 <__floatsisf+0x12>
 daa:	90 95       	com	r25
 dac:	80 95       	com	r24
 dae:	70 95       	com	r23
 db0:	61 95       	neg	r22
 db2:	7f 4f       	sbci	r23, 0xFF	; 255
 db4:	8f 4f       	sbci	r24, 0xFF	; 255
 db6:	9f 4f       	sbci	r25, 0xFF	; 255
 db8:	99 23       	and	r25, r25
 dba:	a9 f0       	breq	.+42     	; 0xde6 <__floatsisf+0x40>
 dbc:	f9 2f       	mov	r31, r25
 dbe:	96 e9       	ldi	r25, 0x96	; 150
 dc0:	bb 27       	eor	r27, r27
 dc2:	93 95       	inc	r25
 dc4:	f6 95       	lsr	r31
 dc6:	87 95       	ror	r24
 dc8:	77 95       	ror	r23
 dca:	67 95       	ror	r22
 dcc:	b7 95       	ror	r27
 dce:	f1 11       	cpse	r31, r1
 dd0:	f8 cf       	rjmp	.-16     	; 0xdc2 <__floatsisf+0x1c>
 dd2:	fa f4       	brpl	.+62     	; 0xe12 <__floatsisf+0x6c>
 dd4:	bb 0f       	add	r27, r27
 dd6:	11 f4       	brne	.+4      	; 0xddc <__floatsisf+0x36>
 dd8:	60 ff       	sbrs	r22, 0
 dda:	1b c0       	rjmp	.+54     	; 0xe12 <__floatsisf+0x6c>
 ddc:	6f 5f       	subi	r22, 0xFF	; 255
 dde:	7f 4f       	sbci	r23, 0xFF	; 255
 de0:	8f 4f       	sbci	r24, 0xFF	; 255
 de2:	9f 4f       	sbci	r25, 0xFF	; 255
 de4:	16 c0       	rjmp	.+44     	; 0xe12 <__floatsisf+0x6c>
 de6:	88 23       	and	r24, r24
 de8:	11 f0       	breq	.+4      	; 0xdee <__floatsisf+0x48>
 dea:	96 e9       	ldi	r25, 0x96	; 150
 dec:	11 c0       	rjmp	.+34     	; 0xe10 <__floatsisf+0x6a>
 dee:	77 23       	and	r23, r23
 df0:	21 f0       	breq	.+8      	; 0xdfa <__floatsisf+0x54>
 df2:	9e e8       	ldi	r25, 0x8E	; 142
 df4:	87 2f       	mov	r24, r23
 df6:	76 2f       	mov	r23, r22
 df8:	05 c0       	rjmp	.+10     	; 0xe04 <__floatsisf+0x5e>
 dfa:	66 23       	and	r22, r22
 dfc:	71 f0       	breq	.+28     	; 0xe1a <__floatsisf+0x74>
 dfe:	96 e8       	ldi	r25, 0x86	; 134
 e00:	86 2f       	mov	r24, r22
 e02:	70 e0       	ldi	r23, 0x00	; 0
 e04:	60 e0       	ldi	r22, 0x00	; 0
 e06:	2a f0       	brmi	.+10     	; 0xe12 <__floatsisf+0x6c>
 e08:	9a 95       	dec	r25
 e0a:	66 0f       	add	r22, r22
 e0c:	77 1f       	adc	r23, r23
 e0e:	88 1f       	adc	r24, r24
 e10:	da f7       	brpl	.-10     	; 0xe08 <__floatsisf+0x62>
 e12:	88 0f       	add	r24, r24
 e14:	96 95       	lsr	r25
 e16:	87 95       	ror	r24
 e18:	97 f9       	bld	r25, 7
 e1a:	08 95       	ret

00000e1c <__fp_cmp>:
 e1c:	99 0f       	add	r25, r25
 e1e:	00 08       	sbc	r0, r0
 e20:	55 0f       	add	r21, r21
 e22:	aa 0b       	sbc	r26, r26
 e24:	e0 e8       	ldi	r30, 0x80	; 128
 e26:	fe ef       	ldi	r31, 0xFE	; 254
 e28:	16 16       	cp	r1, r22
 e2a:	17 06       	cpc	r1, r23
 e2c:	e8 07       	cpc	r30, r24
 e2e:	f9 07       	cpc	r31, r25
 e30:	c0 f0       	brcs	.+48     	; 0xe62 <__fp_cmp+0x46>
 e32:	12 16       	cp	r1, r18
 e34:	13 06       	cpc	r1, r19
 e36:	e4 07       	cpc	r30, r20
 e38:	f5 07       	cpc	r31, r21
 e3a:	98 f0       	brcs	.+38     	; 0xe62 <__fp_cmp+0x46>
 e3c:	62 1b       	sub	r22, r18
 e3e:	73 0b       	sbc	r23, r19
 e40:	84 0b       	sbc	r24, r20
 e42:	95 0b       	sbc	r25, r21
 e44:	39 f4       	brne	.+14     	; 0xe54 <__fp_cmp+0x38>
 e46:	0a 26       	eor	r0, r26
 e48:	61 f0       	breq	.+24     	; 0xe62 <__fp_cmp+0x46>
 e4a:	23 2b       	or	r18, r19
 e4c:	24 2b       	or	r18, r20
 e4e:	25 2b       	or	r18, r21
 e50:	21 f4       	brne	.+8      	; 0xe5a <__fp_cmp+0x3e>
 e52:	08 95       	ret
 e54:	0a 26       	eor	r0, r26
 e56:	09 f4       	brne	.+2      	; 0xe5a <__fp_cmp+0x3e>
 e58:	a1 40       	sbci	r26, 0x01	; 1
 e5a:	a6 95       	lsr	r26
 e5c:	8f ef       	ldi	r24, 0xFF	; 255
 e5e:	81 1d       	adc	r24, r1
 e60:	81 1d       	adc	r24, r1
 e62:	08 95       	ret

00000e64 <__fp_inf>:
 e64:	97 f9       	bld	r25, 7
 e66:	9f 67       	ori	r25, 0x7F	; 127
 e68:	80 e8       	ldi	r24, 0x80	; 128
 e6a:	70 e0       	ldi	r23, 0x00	; 0
 e6c:	60 e0       	ldi	r22, 0x00	; 0
 e6e:	08 95       	ret

00000e70 <__fp_nan>:
 e70:	9f ef       	ldi	r25, 0xFF	; 255
 e72:	80 ec       	ldi	r24, 0xC0	; 192
 e74:	08 95       	ret

00000e76 <__fp_pscA>:
 e76:	00 24       	eor	r0, r0
 e78:	0a 94       	dec	r0
 e7a:	16 16       	cp	r1, r22
 e7c:	17 06       	cpc	r1, r23
 e7e:	18 06       	cpc	r1, r24
 e80:	09 06       	cpc	r0, r25
 e82:	08 95       	ret

00000e84 <__fp_pscB>:
 e84:	00 24       	eor	r0, r0
 e86:	0a 94       	dec	r0
 e88:	12 16       	cp	r1, r18
 e8a:	13 06       	cpc	r1, r19
 e8c:	14 06       	cpc	r1, r20
 e8e:	05 06       	cpc	r0, r21
 e90:	08 95       	ret

00000e92 <__fp_round>:
 e92:	09 2e       	mov	r0, r25
 e94:	03 94       	inc	r0
 e96:	00 0c       	add	r0, r0
 e98:	11 f4       	brne	.+4      	; 0xe9e <__fp_round+0xc>
 e9a:	88 23       	and	r24, r24
 e9c:	52 f0       	brmi	.+20     	; 0xeb2 <__fp_round+0x20>
 e9e:	bb 0f       	add	r27, r27
 ea0:	40 f4       	brcc	.+16     	; 0xeb2 <__fp_round+0x20>
 ea2:	bf 2b       	or	r27, r31
 ea4:	11 f4       	brne	.+4      	; 0xeaa <__fp_round+0x18>
 ea6:	60 ff       	sbrs	r22, 0
 ea8:	04 c0       	rjmp	.+8      	; 0xeb2 <__fp_round+0x20>
 eaa:	6f 5f       	subi	r22, 0xFF	; 255
 eac:	7f 4f       	sbci	r23, 0xFF	; 255
 eae:	8f 4f       	sbci	r24, 0xFF	; 255
 eb0:	9f 4f       	sbci	r25, 0xFF	; 255
 eb2:	08 95       	ret

00000eb4 <__fp_split3>:
 eb4:	57 fd       	sbrc	r21, 7
 eb6:	90 58       	subi	r25, 0x80	; 128
 eb8:	44 0f       	add	r20, r20
 eba:	55 1f       	adc	r21, r21
 ebc:	59 f0       	breq	.+22     	; 0xed4 <__fp_splitA+0x10>
 ebe:	5f 3f       	cpi	r21, 0xFF	; 255
 ec0:	71 f0       	breq	.+28     	; 0xede <__fp_splitA+0x1a>
 ec2:	47 95       	ror	r20

00000ec4 <__fp_splitA>:
 ec4:	88 0f       	add	r24, r24
 ec6:	97 fb       	bst	r25, 7
 ec8:	99 1f       	adc	r25, r25
 eca:	61 f0       	breq	.+24     	; 0xee4 <__fp_splitA+0x20>
 ecc:	9f 3f       	cpi	r25, 0xFF	; 255
 ece:	79 f0       	breq	.+30     	; 0xeee <__fp_splitA+0x2a>
 ed0:	87 95       	ror	r24
 ed2:	08 95       	ret
 ed4:	12 16       	cp	r1, r18
 ed6:	13 06       	cpc	r1, r19
 ed8:	14 06       	cpc	r1, r20
 eda:	55 1f       	adc	r21, r21
 edc:	f2 cf       	rjmp	.-28     	; 0xec2 <__fp_split3+0xe>
 ede:	46 95       	lsr	r20
 ee0:	f1 df       	rcall	.-30     	; 0xec4 <__fp_splitA>
 ee2:	08 c0       	rjmp	.+16     	; 0xef4 <__fp_splitA+0x30>
 ee4:	16 16       	cp	r1, r22
 ee6:	17 06       	cpc	r1, r23
 ee8:	18 06       	cpc	r1, r24
 eea:	99 1f       	adc	r25, r25
 eec:	f1 cf       	rjmp	.-30     	; 0xed0 <__fp_splitA+0xc>
 eee:	86 95       	lsr	r24
 ef0:	71 05       	cpc	r23, r1
 ef2:	61 05       	cpc	r22, r1
 ef4:	08 94       	sec
 ef6:	08 95       	ret

00000ef8 <__fp_zero>:
 ef8:	e8 94       	clt

00000efa <__fp_szero>:
 efa:	bb 27       	eor	r27, r27
 efc:	66 27       	eor	r22, r22
 efe:	77 27       	eor	r23, r23
 f00:	cb 01       	movw	r24, r22
 f02:	97 f9       	bld	r25, 7
 f04:	08 95       	ret

00000f06 <__gesf2>:
 f06:	0e 94 0e 07 	call	0xe1c	; 0xe1c <__fp_cmp>
 f0a:	08 f4       	brcc	.+2      	; 0xf0e <__gesf2+0x8>
 f0c:	8f ef       	ldi	r24, 0xFF	; 255
 f0e:	08 95       	ret

00000f10 <__mulsf3>:
 f10:	0e 94 9b 07 	call	0xf36	; 0xf36 <__mulsf3x>
 f14:	0c 94 49 07 	jmp	0xe92	; 0xe92 <__fp_round>
 f18:	0e 94 3b 07 	call	0xe76	; 0xe76 <__fp_pscA>
 f1c:	38 f0       	brcs	.+14     	; 0xf2c <__mulsf3+0x1c>
 f1e:	0e 94 42 07 	call	0xe84	; 0xe84 <__fp_pscB>
 f22:	20 f0       	brcs	.+8      	; 0xf2c <__mulsf3+0x1c>
 f24:	95 23       	and	r25, r21
 f26:	11 f0       	breq	.+4      	; 0xf2c <__mulsf3+0x1c>
 f28:	0c 94 32 07 	jmp	0xe64	; 0xe64 <__fp_inf>
 f2c:	0c 94 38 07 	jmp	0xe70	; 0xe70 <__fp_nan>
 f30:	11 24       	eor	r1, r1
 f32:	0c 94 7d 07 	jmp	0xefa	; 0xefa <__fp_szero>

00000f36 <__mulsf3x>:
 f36:	0e 94 5a 07 	call	0xeb4	; 0xeb4 <__fp_split3>
 f3a:	70 f3       	brcs	.-36     	; 0xf18 <__mulsf3+0x8>

00000f3c <__mulsf3_pse>:
 f3c:	95 9f       	mul	r25, r21
 f3e:	c1 f3       	breq	.-16     	; 0xf30 <__mulsf3+0x20>
 f40:	95 0f       	add	r25, r21
 f42:	50 e0       	ldi	r21, 0x00	; 0
 f44:	55 1f       	adc	r21, r21
 f46:	62 9f       	mul	r22, r18
 f48:	f0 01       	movw	r30, r0
 f4a:	72 9f       	mul	r23, r18
 f4c:	bb 27       	eor	r27, r27
 f4e:	f0 0d       	add	r31, r0
 f50:	b1 1d       	adc	r27, r1
 f52:	63 9f       	mul	r22, r19
 f54:	aa 27       	eor	r26, r26
 f56:	f0 0d       	add	r31, r0
 f58:	b1 1d       	adc	r27, r1
 f5a:	aa 1f       	adc	r26, r26
 f5c:	64 9f       	mul	r22, r20
 f5e:	66 27       	eor	r22, r22
 f60:	b0 0d       	add	r27, r0
 f62:	a1 1d       	adc	r26, r1
 f64:	66 1f       	adc	r22, r22
 f66:	82 9f       	mul	r24, r18
 f68:	22 27       	eor	r18, r18
 f6a:	b0 0d       	add	r27, r0
 f6c:	a1 1d       	adc	r26, r1
 f6e:	62 1f       	adc	r22, r18
 f70:	73 9f       	mul	r23, r19
 f72:	b0 0d       	add	r27, r0
 f74:	a1 1d       	adc	r26, r1
 f76:	62 1f       	adc	r22, r18
 f78:	83 9f       	mul	r24, r19
 f7a:	a0 0d       	add	r26, r0
 f7c:	61 1d       	adc	r22, r1
 f7e:	22 1f       	adc	r18, r18
 f80:	74 9f       	mul	r23, r20
 f82:	33 27       	eor	r19, r19
 f84:	a0 0d       	add	r26, r0
 f86:	61 1d       	adc	r22, r1
 f88:	23 1f       	adc	r18, r19
 f8a:	84 9f       	mul	r24, r20
 f8c:	60 0d       	add	r22, r0
 f8e:	21 1d       	adc	r18, r1
 f90:	82 2f       	mov	r24, r18
 f92:	76 2f       	mov	r23, r22
 f94:	6a 2f       	mov	r22, r26
 f96:	11 24       	eor	r1, r1
 f98:	9f 57       	subi	r25, 0x7F	; 127
 f9a:	50 40       	sbci	r21, 0x00	; 0
 f9c:	9a f0       	brmi	.+38     	; 0xfc4 <__mulsf3_pse+0x88>
 f9e:	f1 f0       	breq	.+60     	; 0xfdc <__mulsf3_pse+0xa0>
 fa0:	88 23       	and	r24, r24
 fa2:	4a f0       	brmi	.+18     	; 0xfb6 <__mulsf3_pse+0x7a>
 fa4:	ee 0f       	add	r30, r30
 fa6:	ff 1f       	adc	r31, r31
 fa8:	bb 1f       	adc	r27, r27
 faa:	66 1f       	adc	r22, r22
 fac:	77 1f       	adc	r23, r23
 fae:	88 1f       	adc	r24, r24
 fb0:	91 50       	subi	r25, 0x01	; 1
 fb2:	50 40       	sbci	r21, 0x00	; 0
 fb4:	a9 f7       	brne	.-22     	; 0xfa0 <__mulsf3_pse+0x64>
 fb6:	9e 3f       	cpi	r25, 0xFE	; 254
 fb8:	51 05       	cpc	r21, r1
 fba:	80 f0       	brcs	.+32     	; 0xfdc <__mulsf3_pse+0xa0>
 fbc:	0c 94 32 07 	jmp	0xe64	; 0xe64 <__fp_inf>
 fc0:	0c 94 7d 07 	jmp	0xefa	; 0xefa <__fp_szero>
 fc4:	5f 3f       	cpi	r21, 0xFF	; 255
 fc6:	e4 f3       	brlt	.-8      	; 0xfc0 <__mulsf3_pse+0x84>
 fc8:	98 3e       	cpi	r25, 0xE8	; 232
 fca:	d4 f3       	brlt	.-12     	; 0xfc0 <__mulsf3_pse+0x84>
 fcc:	86 95       	lsr	r24
 fce:	77 95       	ror	r23
 fd0:	67 95       	ror	r22
 fd2:	b7 95       	ror	r27
 fd4:	f7 95       	ror	r31
 fd6:	e7 95       	ror	r30
 fd8:	9f 5f       	subi	r25, 0xFF	; 255
 fda:	c1 f7       	brne	.-16     	; 0xfcc <__mulsf3_pse+0x90>
 fdc:	fe 2b       	or	r31, r30
 fde:	88 0f       	add	r24, r24
 fe0:	91 1d       	adc	r25, r1
 fe2:	96 95       	lsr	r25
 fe4:	87 95       	ror	r24
 fe6:	97 f9       	bld	r25, 7
 fe8:	08 95       	ret

00000fea <_exit>:
 fea:	f8 94       	cli

00000fec <__stop_program>:
 fec:	ff cf       	rjmp	.-2      	; 0xfec <__stop_program>
